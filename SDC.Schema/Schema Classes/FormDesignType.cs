// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// Start here.  This is the top level of the SDCFormDesign object model.  It represents the definition for the information content of a single data-entry form.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[System.Xml.Serialization.XmlRootAttribute("FormDesign", Namespace="urn:ihe:qrph:sdc:2016", IsNullable=false)]
public partial class FormDesignType : IdentifiedExtensionType
{
    
    private static XmlSerializer serializer;
    
    /// <summary>
    /// NEW:
    /// This event is fired before the page is loaded into memory, and before stored form data is loaded.  It may be used, e.g., for authentication, to retrieve/prepare stored data, and/or to control form rendering according to user preferences.
    /// </summary>
        public EventType BeforeLoadForm { get; set; }
    /// <summary>
    /// NEW:
    /// This event is fired after the page is loaded into memory, before stored form data is loaded, and before the form is visible.  For example, It may be used to determine the data to be loaded and to perform the data loading.
    /// </summary>
        public EventType BeforeLoadData { get; set; }
    /// <summary>
    /// NEW:
    /// This event is fired after the page is loaded is memory, after the data is loaded into the form, but before the form is displayed.  It may be used to perform form activities that are controlled by the loaded data.
    /// </summary>
        public EventType BeforeShowForm { get; set; }
        public EventType BeforeDataSubmit { get; set; }
        public EventType BeforeCloseForm { get; set; }
    /// <summary>
    /// Generic event handler - eventName must be specified.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OnEvent")]
        public List<OnEventType> OnEvent { get; set; }
    /// <summary>
    /// Optional Section that stays at the top of a form.
    /// </summary>
        public SectionItemType Header { get; set; }
    /// <summary>
    /// Main Section of form
    /// </summary>
        public SectionItemType Body { get; set; }
    /// <summary>
    /// Optional Section that stays at the bottom of a form.
    /// </summary>
        public SectionItemType Footer { get; set; }
        public RulesType Rules { get; set; }
    /// <summary>
    /// NEW: human readable title for display when choosing forms. Added 4/27/16
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string formTitle { get; set; }
    /// <summary>
    /// NEW: filename to use when the current FormDesign instance is saved as a file.
    /// For forms containing responses, the filename may include the formInstanceVersionURI,
    /// but the naming convention may be use-case-specific.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string filename { get; set; }
    /// <summary>
    /// NEW: URI used to identify the form that that this FormDesign is based upon.  In most cases, this should be a standard form that is modified and/or extended by the current FormDesign.
    /// 
    /// The current template reuses the basedOn IDs whenever the question/answer/semantic context is identical to the original.
    /// 
    /// 5/11/17:  Relying on data element mapping may be a better and more flexible approach than @basedOnURI. In this way, forms could compare data elements to determine if they contain semantic matches, and this is supported better with a more robust code map section.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string basedOnURI { get; set; }
    /// <summary>
    /// NEW: A text identifier that is used to group multiple versions of a single form.  The lineage is constant for all versions of a single kind of form.
    /// 
    /// When appended to @baseURI, it can be used to retrieve all versions of one particular form.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string lineage { get; set; }
    /// <summary>
    /// NEW: @version contains the version text for the current form.  It is designed to be used in conjuction with @baseURI and @lineage.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version { get; set; }
    /// <summary>
    /// NEW: The full URI that uniquely identifies the current form.   It is created by concatenating @baseURI + lineage + version.  Each of the componenets is separated by a single forward slash.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string fullURI { get; set; }
    /// <summary>
    /// NEW: The full URI used to identify the form that is the immediate previous version of the current FormDesign
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string prevVersionURI { get; set; }
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a form.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI does not change for each edit session of a form instance.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string formInstanceURI { get; set; }
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a form's saved responses.  It is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit/save session of a form instance.  It may be e.g., a new GUID, or a repeat of the formInstanceID followed by a version number.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string formInstanceVersionURI { get; set; }
    /// <summary>
    /// NEW: Unique URI used to identify the immediate previous instance of a form containing responses.  This is the @formInstanceVersionURI that represents the instance of the form that the user opened up before beginning a new cycle of edit/save.  This attribute is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit session of a form instance.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string formPreviousInstanceVersionURI { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public SectionBaseTypeResponseTypeEnum responseTypeEnum { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public SectionBaseTypeResponseStatusEnum responseStatusEnum { get; set; }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(FormDesignType));
            }
            return serializer;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current FormDesignType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.NewLineOnAttributes = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an FormDesignType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output FormDesignType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out FormDesignType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(FormDesignType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out FormDesignType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static FormDesignType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((FormDesignType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static FormDesignType Deserialize(System.IO.Stream s)
    {
        return ((FormDesignType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current FormDesignType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an FormDesignType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output FormDesignType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out FormDesignType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(FormDesignType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out FormDesignType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static FormDesignType LoadFromFile(string fileName)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
