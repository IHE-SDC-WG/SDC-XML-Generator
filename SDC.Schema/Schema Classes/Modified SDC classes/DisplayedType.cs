// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// This type represents any object that is designed to have a visual presence on a form, e.g., Sections, Questions, ListItems, Notes and Blobs.  (Other items not inheriting this type may use an optional styleClass attribute.)
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ButtonItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RepeatingType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class DisplayedType : IdentifiedExtensionType
{
    
    private bool _shouldSerializeshowInReport;
    
    private bool _shouldSerializemustImplement;
    
    private bool _shouldSerializevisible;
    
    private bool _shouldSerializeenabled;
    
    private static XmlSerializer serializer;
    
    /// <summary>
    /// Link to external information.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Link", Order=0)]
        public virtual List<LinkType> Link { get; set; }
    /// <summary>
    /// Blob information associated with the current DisplayedType.  The blob may contain any type of special media, but must be base 64 encoded.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("BlobContent", Order=1)]
        public virtual List<BlobType> BlobContent { get; set; }
    /// <summary>
    /// Any desired contact information regarding, e.g., the form item, authoring process, certifications, code or coding processs.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Contact", Order=2)]
        public virtual List<ContactType> Contact { get; set; }
    /// <summary>
    /// Coding, terminology, classification, keyword, or local values
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("CodedValue", Order=3)]
        public virtual List<CodingType> CodedValue { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("OnEnter", Order=4)]
        public virtual List<EventType> OnEnter { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("OnExit", Order=5)]
        public virtual List<EventType> OnExit { get; set; }
    /// <summary>
    /// Generic event handler - eventName must be specified.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OnEvent", Order=6)]
        public virtual List<OnEventType> OnEvent { get; set; }
    /// <summary>
    /// Activate the DisplayedType item if the guard conditions are met.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public virtual GuardType ActivateIf { get; set; }
    /// <summary>
    /// DeActivate the DisplayedType item if the guard conditions are met.
    /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public virtual GuardType DeActivateIf { get; set; }
    /// <summary>
    /// The primary text to show on the form.  Also known as "prompt" or "label" or "visibleText" or "caption"
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual string title { get; set; }
    /// <summary>
    /// Determines whether the user can interact with the displayed item when the form is first displayed.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public virtual bool enabled { get; set; }
    /// <summary>
    /// Determines whether the item should be visible on a computer screen when the form is first displayed.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public virtual bool visible { get; set; }
    /// <summary>
    /// If this attribute is set to "true" (the default), then the form implementation must make this item available for use on the form. If this attribute is set to "false" on a parent or ancestor item, then all child/descendant items inherit this "false" setting, even if they have this attribute set to "true." In other words, the child/descendent items do not need to be implemented if any parent/ancestor item has this attribute set to false.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public virtual bool mustImplement { get; set; }
    /// <summary>
    /// CHANGED to T/F/Optional
    /// 
    /// If @showInReport on a Question is false, then the Question and its ListItems (if any) should not be present in a typical report derived from this template.  If this attribute appears on a ListItem, then the entire question and all ListItems should be omitted from the report.  If this attribute appears on a Section, then the entire Section and all Section contents (descendents) should be omitted from the report.  If @showInReport appears on a DisplayedItem, then the DisplayedItem (and all sub-items) should be omitted from the report.
    /// 
    /// This attribute is usually set to false when a Question is used to control form behavior (e.g., skip logic), or when the Question provides unhelpful "negative" information about actions that did not occur or were not performed, or things that were not observed.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DisplayedTypeShowInReport.True)]
        public virtual DisplayedTypeShowInReport showInReport { get; set; }
    
    ///// <summary>
    ///// DisplayedType class constructor
    ///// </summary>
    //public DisplayedType()
    //{
    //    this.enabled = true;
    //    this.visible = true;
    //    this.mustImplement = true;
    //    this.showInReport = DisplayedTypeShowInReport.True;
    //}
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(DisplayedType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether Link should be serialized
    /// </summary>
    public virtual bool ShouldSerializeLink()
    {
        return Link != null && Link.Count > 0;
    }
    
    /// <summary>
    /// Test whether BlobContent should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBlobContent()
    {
        return BlobContent != null && BlobContent.Count > 0;
    }
    
    /// <summary>
    /// Test whether Contact should be serialized
    /// </summary>
    public virtual bool ShouldSerializeContact()
    {
        return Contact != null && Contact.Count > 0;
    }
    
    /// <summary>
    /// Test whether CodedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodedValue()
    {
        return CodedValue != null && CodedValue.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnEnter should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnEnter()
    {
        return OnEnter != null && OnEnter.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnExit should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnExit()
    {
        return OnExit != null && OnExit.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnEvent should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnEvent()
    {
        return OnEvent != null && OnEvent.Count > 0;
    }
    
    /// <summary>
    /// Test whether enabled should be serialized
    /// </summary>
    public virtual bool ShouldSerializeenabled()
    {
        if (_shouldSerializeenabled)
        {
            return true;
        }
        return (enabled != true); // default(bool));  BUG fix
        }
    
    /// <summary>
    /// Test whether visible should be serialized
    /// </summary>
    public virtual bool ShouldSerializevisible()
    {
        if (_shouldSerializevisible)
        {
            return true;
        }
        return (visible != true); // default(bool));  BUG fix
        }
    
    /// <summary>
    /// Test whether mustImplement should be serialized
    /// </summary>
    public virtual bool ShouldSerializemustImplement()
    {
        if (_shouldSerializemustImplement)
        {
            return true;
        }
            return (mustImplement != true); // default(bool));  BUG fix
    }
    
    /// <summary>
    /// Test whether showInReport should be serialized
    /// </summary>
    public virtual bool ShouldSerializeshowInReport()
    {
        if (_shouldSerializeshowInReport)
        {
            return true;
        }
        return (showInReport != default(DisplayedTypeShowInReport));
    }
    
    /// <summary>
    /// Test whether ActivateIf should be serialized
    /// </summary>
    public virtual bool ShouldSerializeActivateIf()
    {
        return (ActivateIf != null);
    }
    
    /// <summary>
    /// Test whether DeActivateIf should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDeActivateIf()
    {
        return (DeActivateIf != null);
    }
    
    /// <summary>
    /// Test whether title should be serialized
    /// </summary>
    public virtual bool ShouldSerializetitle()
    {
        return !string.IsNullOrEmpty(title);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current DisplayedType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an DisplayedType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output DisplayedType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out DisplayedType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(DisplayedType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out DisplayedType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static DisplayedType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((DisplayedType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static DisplayedType Deserialize(System.IO.Stream s)
    {
        return ((DisplayedType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current DisplayedType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an DisplayedType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output DisplayedType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DisplayedType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(DisplayedType);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out DisplayedType obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out DisplayedType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static DisplayedType LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static DisplayedType LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
