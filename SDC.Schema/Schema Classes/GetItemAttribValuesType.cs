// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// This Rule evaluates an arbitrary set of attribute values from any item and returns a Boolean summary value.
/// 
/// In the PropertyValues condition, the contained Boolean attributed values are ANDed together (by default) to return a derived Boolean value.  Default values are used if the attribute is not explicitly  set to a value.  For attributes without default values, omitted (null) values are ignored and are not used for null propagation.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class GetItemAttribValuesType : FuncBoolBaseType
{
    
    private static XmlSerializer serializer;
    
        [System.Xml.Serialization.XmlElementAttribute("ScriptBoolFunc")]
        public List<ScriptCodeBoolType> ScriptBoolFunc { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CallBoolFunc")]
        public List<CallBoolFuncType> CallBoolFunc { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Group")]
        public List<GetItemAttribValuesType> Group { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool not { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(GetItemAttribValuesTypeBoolOp.AND)]
        public GetItemAttribValuesTypeBoolOp boolOp { get; set; }
    /// <summary>
    /// Required name(s) of the item(s) (Section, Question, List Item) that contains the item properties used in the other attributes.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
        public string itemNames { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isSelected { get; set; }
    /// <summary>
    /// If visible and enabled are both true, then isActive is true.  Otherwise, it is false.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isActive { get; set; }
    /// <summary>
    /// Applies only to Questions that have selection lists (ListItems or LookupField).  Evaluates to true if the number of selected items equals or exceeds the entered value.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string hasSelectionsGTE { get; set; }
    /// <summary>
    /// Applies only to Questions that have selection lists (ListItems or LookupField).  Evaluates to true if the number of selected items is less than or equal to the entered value.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string hasSelectionsLTE { get; set; }
    /// <summary>
    /// Applies only to Questions that have selection lists (ListItems or LookupField).  Evaluates to true if the number of selected items equals the entered value.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string hasSelectionsExact { get; set; }
    /// <summary>
    /// Applies only to items that have Response Fields (Questions and ListItems).  If the ListItem or Question has a Response Field, and that field has a value in it, this property returns true.  If it does not have a value, it returns false.  If no Response Field is present, it retuns null and is not used for Boolean comparisons.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool hasResponse { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isVisible { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isEnabled { get; set; }
    /// <summary>
    /// If the minCard value is greater than 0, then isRequired = "true"
    /// If the minCard = "0" then isRequired = "false"
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isRequired { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isReadOnly { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
        public string hasType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
        public string hasStyleClass { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasValueEQ { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasValueLT { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasValueLTE { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasValueGT { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasValueGTE { get; set; }
    /// <summary>
    /// Applies only to ListItems. If the attribute has a value in it, this property returns true.  If it does not have a value, it returns false.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool hasAssociatedValue { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasAssociatedValueEQ { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasAssociatedValueLT { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasAssociatedValueLTE { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasAssociatedValueGT { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal hasAssociatedValueGTE { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string supportdatesandIntervals { get; set; }
    
    /// <summary>
    /// GetItemAttribValuesType class constructor
    /// </summary>
    public GetItemAttribValuesType()
    {
        this.not = false;
        this.boolOp = GetItemAttribValuesTypeBoolOp.AND;
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(GetItemAttribValuesType));
            }
            return serializer;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current GetItemAttribValuesType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.NewLineOnAttributes = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an GetItemAttribValuesType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output GetItemAttribValuesType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out GetItemAttribValuesType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(GetItemAttribValuesType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out GetItemAttribValuesType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static GetItemAttribValuesType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((GetItemAttribValuesType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static GetItemAttribValuesType Deserialize(System.IO.Stream s)
    {
        return ((GetItemAttribValuesType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current GetItemAttribValuesType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an GetItemAttribValuesType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output GetItemAttribValuesType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out GetItemAttribValuesType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(GetItemAttribValuesType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out GetItemAttribValuesType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static GetItemAttribValuesType LoadFromFile(string fileName)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
