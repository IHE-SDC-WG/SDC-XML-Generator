// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// This Rule evaluates an arbitrary set of attribute values from any item and returns a Boolean summary value.
/// 
/// In the PropertyValues condition, the contained Boolean attributed values are ANDed together (by default) to return a derived Boolean value.  Default values are used if the attribute is not explicitly  set to a value.  For attributes without default values, omitted (null) values are ignored and are not used for null propagation.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class GetItemAttribValuesType : FuncBoolBaseType
{
    
    private bool _shouldSerializeboolOp;
    
    private bool _shouldSerializehasAssociatedValueGTE;
    
    private bool _shouldSerializehasAssociatedValueGT;
    
    private bool _shouldSerializehasAssociatedValueLTE;
    
    private bool _shouldSerializehasAssociatedValueLT;
    
    private bool _shouldSerializehasAssociatedValueEQ;
    
    private bool _shouldSerializehasAssociatedValue;
    
    private bool _shouldSerializehasValueGTE;
    
    private bool _shouldSerializehasValueGT;
    
    private bool _shouldSerializehasValueLTE;
    
    private bool _shouldSerializehasValueLT;
    
    private bool _shouldSerializehasValueEQ;
    
    private bool _shouldSerializeisReadOnly;
    
    private bool _shouldSerializeisRequired;
    
    private bool _shouldSerializeisEnabled;
    
    private bool _shouldSerializeisVisible;
    
    private bool _shouldSerializehasResponse;
    
    private bool _shouldSerializeisActive;
    
    private bool _shouldSerializeisSelected;
    
    private bool _shouldSerializenot;
    
    private static XmlSerializer serializer;
    
        [System.Xml.Serialization.XmlElementAttribute("ScriptBoolFunc", Order=0)]
        public virtual List<ScriptCodeBoolType> ScriptBoolFunc { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CallBoolFunc", Order=1)]
        public virtual List<CallBoolFuncType> CallBoolFunc { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Group", Order=2)]
        public virtual List<GetItemAttribValuesType> Group { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public virtual bool not { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool notSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(GetItemAttribValuesTypeBoolOp.AND)]
        public virtual GetItemAttribValuesTypeBoolOp boolOp { get; set; }
    /// <summary>
    /// Required name(s) of the item(s) (Section, Question, List Item) that contains the item properties used in the other attributes.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
        public virtual string itemNames { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool isSelected { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool isSelectedSpecified { get; set; }
    /// <summary>
    /// If visible and enabled are both true, then isActive is true.  Otherwise, it is false.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool isActive { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool isActiveSpecified { get; set; }
    /// <summary>
    /// Applies only to Questions that have selection lists (ListItems or LookupField).  Evaluates to true if the number of selected items equals or exceeds the entered value.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public virtual string hasSelectionsGTE { get; set; }
    /// <summary>
    /// Applies only to Questions that have selection lists (ListItems or LookupField).  Evaluates to true if the number of selected items is less than or equal to the entered value.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public virtual string hasSelectionsLTE { get; set; }
    /// <summary>
    /// Applies only to Questions that have selection lists (ListItems or LookupField).  Evaluates to true if the number of selected items equals the entered value.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public virtual string hasSelectionsExact { get; set; }
    /// <summary>
    /// Applies only to items that have Response Fields (Questions and ListItems).  If the ListItem or Question has a Response Field, and that field has a value in it, this property returns true.  If it does not have a value, it returns false.  If no Response Field is present, it retuns null and is not used for Boolean comparisons.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool hasResponse { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasResponseSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool isVisible { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool isVisibleSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool isEnabled { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool isEnabledSpecified { get; set; }
    /// <summary>
    /// If the minCard value is greater than 0, then isRequired = "true"
    /// If the minCard = "0" then isRequired = "false"
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool isRequired { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool isRequiredSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool isReadOnly { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool isReadOnlySpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
        public virtual string hasType { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
        public virtual string hasStyleClass { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasValueEQ { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasValueEQSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasValueLT { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasValueLTSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasValueLTE { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasValueLTESpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasValueGT { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasValueGTSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasValueGTE { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasValueGTESpecified { get; set; }
    /// <summary>
    /// Applies only to ListItems. If the attribute has a value in it, this property returns true.  If it does not have a value, it returns false.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual bool hasAssociatedValue { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasAssociatedValueSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasAssociatedValueEQ { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasAssociatedValueEQSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasAssociatedValueLT { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasAssociatedValueLTSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasAssociatedValueLTE { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasAssociatedValueLTESpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasAssociatedValueGT { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasAssociatedValueGTSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual decimal hasAssociatedValueGTE { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool hasAssociatedValueGTESpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual string supportdatesandIntervals { get; set; }
    
    /// <summary>
    /// GetItemAttribValuesType class constructor
    /// </summary>
    public GetItemAttribValuesType()
    {
        this.not = false;
        this.boolOp = GetItemAttribValuesTypeBoolOp.AND;
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(GetItemAttribValuesType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether ScriptBoolFunc should be serialized
    /// </summary>
    public virtual bool ShouldSerializeScriptBoolFunc()
    {
        return ScriptBoolFunc != null && ScriptBoolFunc.Count > 0;
    }
    
    /// <summary>
    /// Test whether CallBoolFunc should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCallBoolFunc()
    {
        return CallBoolFunc != null && CallBoolFunc.Count > 0;
    }
    
    /// <summary>
    /// Test whether Group should be serialized
    /// </summary>
    public virtual bool ShouldSerializeGroup()
    {
        return Group != null && Group.Count > 0;
    }
    
    /// <summary>
    /// Test whether not should be serialized
    /// </summary>
    public virtual bool ShouldSerializenot()
    {
        if (_shouldSerializenot)
        {
            return true;
        }
        return (not != default(bool));
    }
    
    /// <summary>
    /// Test whether isSelected should be serialized
    /// </summary>
    public virtual bool ShouldSerializeisSelected()
    {
        if (_shouldSerializeisSelected)
        {
            return true;
        }
        return (isSelected != default(bool));
    }
    
    /// <summary>
    /// Test whether isActive should be serialized
    /// </summary>
    public virtual bool ShouldSerializeisActive()
    {
        if (_shouldSerializeisActive)
        {
            return true;
        }
        return (isActive != default(bool));
    }
    
    /// <summary>
    /// Test whether hasResponse should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasResponse()
    {
        if (_shouldSerializehasResponse)
        {
            return true;
        }
        return (hasResponse != default(bool));
    }
    
    /// <summary>
    /// Test whether isVisible should be serialized
    /// </summary>
    public virtual bool ShouldSerializeisVisible()
    {
        if (_shouldSerializeisVisible)
        {
            return true;
        }
        return (isVisible != default(bool));
    }
    
    /// <summary>
    /// Test whether isEnabled should be serialized
    /// </summary>
    public virtual bool ShouldSerializeisEnabled()
    {
        if (_shouldSerializeisEnabled)
        {
            return true;
        }
        return (isEnabled != default(bool));
    }
    
    /// <summary>
    /// Test whether isRequired should be serialized
    /// </summary>
    public virtual bool ShouldSerializeisRequired()
    {
        if (_shouldSerializeisRequired)
        {
            return true;
        }
        return (isRequired != default(bool));
    }
    
    /// <summary>
    /// Test whether isReadOnly should be serialized
    /// </summary>
    public virtual bool ShouldSerializeisReadOnly()
    {
        if (_shouldSerializeisReadOnly)
        {
            return true;
        }
        return (isReadOnly != default(bool));
    }
    
    /// <summary>
    /// Test whether hasValueEQ should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasValueEQ()
    {
        if (_shouldSerializehasValueEQ)
        {
            return true;
        }
        return (hasValueEQ != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasValueLT should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasValueLT()
    {
        if (_shouldSerializehasValueLT)
        {
            return true;
        }
        return (hasValueLT != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasValueLTE should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasValueLTE()
    {
        if (_shouldSerializehasValueLTE)
        {
            return true;
        }
        return (hasValueLTE != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasValueGT should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasValueGT()
    {
        if (_shouldSerializehasValueGT)
        {
            return true;
        }
        return (hasValueGT != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasValueGTE should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasValueGTE()
    {
        if (_shouldSerializehasValueGTE)
        {
            return true;
        }
        return (hasValueGTE != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasAssociatedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasAssociatedValue()
    {
        if (_shouldSerializehasAssociatedValue)
        {
            return true;
        }
        return (hasAssociatedValue != default(bool));
    }
    
    /// <summary>
    /// Test whether hasAssociatedValueEQ should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasAssociatedValueEQ()
    {
        if (_shouldSerializehasAssociatedValueEQ)
        {
            return true;
        }
        return (hasAssociatedValueEQ != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasAssociatedValueLT should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasAssociatedValueLT()
    {
        if (_shouldSerializehasAssociatedValueLT)
        {
            return true;
        }
        return (hasAssociatedValueLT != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasAssociatedValueLTE should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasAssociatedValueLTE()
    {
        if (_shouldSerializehasAssociatedValueLTE)
        {
            return true;
        }
        return (hasAssociatedValueLTE != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasAssociatedValueGT should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasAssociatedValueGT()
    {
        if (_shouldSerializehasAssociatedValueGT)
        {
            return true;
        }
        return (hasAssociatedValueGT != default(decimal));
    }
    
    /// <summary>
    /// Test whether hasAssociatedValueGTE should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasAssociatedValueGTE()
    {
        if (_shouldSerializehasAssociatedValueGTE)
        {
            return true;
        }
        return (hasAssociatedValueGTE != default(decimal));
    }
    
    /// <summary>
    /// Test whether boolOp should be serialized
    /// </summary>
    public virtual bool ShouldSerializeboolOp()
    {
        if (_shouldSerializeboolOp)
        {
            return true;
        }
        return (boolOp != default(GetItemAttribValuesTypeBoolOp));
    }
    
    /// <summary>
    /// Test whether itemNames should be serialized
    /// </summary>
    public virtual bool ShouldSerializeitemNames()
    {
        return !string.IsNullOrEmpty(itemNames);
    }
    
    /// <summary>
    /// Test whether hasSelectionsGTE should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasSelectionsGTE()
    {
        return !string.IsNullOrEmpty(hasSelectionsGTE);
    }
    
    /// <summary>
    /// Test whether hasSelectionsLTE should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasSelectionsLTE()
    {
        return !string.IsNullOrEmpty(hasSelectionsLTE);
    }
    
    /// <summary>
    /// Test whether hasSelectionsExact should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasSelectionsExact()
    {
        return !string.IsNullOrEmpty(hasSelectionsExact);
    }
    
    /// <summary>
    /// Test whether hasType should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasType()
    {
        return !string.IsNullOrEmpty(hasType);
    }
    
    /// <summary>
    /// Test whether hasStyleClass should be serialized
    /// </summary>
    public virtual bool ShouldSerializehasStyleClass()
    {
        return !string.IsNullOrEmpty(hasStyleClass);
    }
    
    /// <summary>
    /// Test whether supportdatesandIntervals should be serialized
    /// </summary>
    public virtual bool ShouldSerializesupportdatesandIntervals()
    {
        return !string.IsNullOrEmpty(supportdatesandIntervals);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current GetItemAttribValuesType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an GetItemAttribValuesType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output GetItemAttribValuesType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out GetItemAttribValuesType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(GetItemAttribValuesType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out GetItemAttribValuesType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static GetItemAttribValuesType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((GetItemAttribValuesType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static GetItemAttribValuesType Deserialize(System.IO.Stream s)
    {
        return ((GetItemAttribValuesType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current GetItemAttribValuesType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an GetItemAttribValuesType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output GetItemAttribValuesType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GetItemAttribValuesType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(GetItemAttribValuesType);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out GetItemAttribValuesType obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out GetItemAttribValuesType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static GetItemAttribValuesType LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static GetItemAttribValuesType LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
