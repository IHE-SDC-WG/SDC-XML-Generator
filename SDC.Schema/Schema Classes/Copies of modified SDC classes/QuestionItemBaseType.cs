// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// Represents questions.  Parent items may be Section, Question, and ListItem.
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public abstract partial class QuestionItemBaseType : RepeatingType
{
    
    private bool _shouldSerializeresponseStatusEnum;
    
    private bool _shouldSerializeresponseTypeEnum;
    
    private bool _shouldSerializereadOnly;
    
    private static XmlSerializer serializer;
    
        [System.Xml.Serialization.XmlElementAttribute("ListField", typeof(ListFieldType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ResponseField", typeof(ResponseFieldType), Order=0)]
        public virtual ExtensionBaseType Item { get; set; }
    /// <summary>
    /// If @readOnly is set to true, the this field may not be edited by the user, and any default values set by template should be considered part of the stored data set responses, and transmitted by the SubmitForm transaction.
    /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public virtual bool readOnly { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual SectionBaseTypeResponseTypeEnum responseTypeEnum { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool responseTypeEnumSpecified { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public virtual SectionBaseTypeResponseStatusEnum responseStatusEnum { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool responseStatusEnumSpecified { get; set; }
    
    ///// <summary>
    ///// QuestionItemBaseType class constructor
    ///// </summary>
    //public QuestionItemBaseType()
    //{
    //    this.readOnly = false;
    //}
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(QuestionItemBaseType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether readOnly should be serialized
    /// </summary>
    public virtual bool ShouldSerializereadOnly()
    {
        if (_shouldSerializereadOnly)
        {
            return true;
        }
        return (readOnly != default(bool));
    }
    
    /// <summary>
    /// Test whether responseTypeEnum should be serialized
    /// </summary>
    public virtual bool ShouldSerializeresponseTypeEnum()
    {
        if (_shouldSerializeresponseTypeEnum)
        {
            return true;
        }
        return (responseTypeEnum != default(SectionBaseTypeResponseTypeEnum));
    }
    
    /// <summary>
    /// Test whether responseStatusEnum should be serialized
    /// </summary>
    public virtual bool ShouldSerializeresponseStatusEnum()
    {
        if (_shouldSerializeresponseStatusEnum)
        {
            return true;
        }
        return (responseStatusEnum != default(SectionBaseTypeResponseStatusEnum));
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (Item != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current QuestionItemBaseType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an QuestionItemBaseType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output QuestionItemBaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out QuestionItemBaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(QuestionItemBaseType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out QuestionItemBaseType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static QuestionItemBaseType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((QuestionItemBaseType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static QuestionItemBaseType Deserialize(System.IO.Stream s)
    {
        return ((QuestionItemBaseType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current QuestionItemBaseType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an QuestionItemBaseType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output QuestionItemBaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out QuestionItemBaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(QuestionItemBaseType);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out QuestionItemBaseType obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out QuestionItemBaseType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static QuestionItemBaseType LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static QuestionItemBaseType LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
