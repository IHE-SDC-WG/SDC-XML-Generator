// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// Start here.  This is the top level of the SDCFormDesign object model.  It represents the definition for the information content of a single data-entry form.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
[System.SerializableAttribute()]
//[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
[System.Xml.Serialization.XmlRootAttribute("FormDesign", Namespace="urn:ihe:qrph:sdc:2016", IsNullable=false)]
public partial class FormDesignType : IdentifiedExtensionType
{
    
    #region Private fields
    [EditorBrowsable(EditorBrowsableState.Never)]
    private EventType _beforeLoadForm;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private EventType _beforeLoadData;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private EventType _beforeShowForm;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private EventType _beforeDataSubmit;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private EventType _beforeCloseForm;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private SectionItemType _header;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private SectionItemType _body;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private SectionItemType _footer;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private RulesType _rules;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _formTitle;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _filename;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _basedOnURI;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _lineage;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _version;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _fullURI;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _prevVersionURI;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _formInstanceURI;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _formInstanceVersionURI;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _formPreviousInstanceVersionURI;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private System.Nullable<SectionBaseTypeResponseTypeEnum> _responseTypeEnum;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private System.Nullable<SectionBaseTypeResponseStatusEnum> _responseStatusEnum;
    
    private static XmlSerializer serializer;
    #endregion
    
    /// <summary>
    /// NEW:
    /// This event is fired before the page is loaded into memory, and before stored form data is loaded.  It may be used, e.g., for authentication, to retrieve/prepare stored data, and/or to control form rendering according to user preferences.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=0)]
    public virtual EventType BeforeLoadForm
    {
        get
        {
            return this._beforeLoadForm;
        }
        set
        {
            this._beforeLoadForm = value;
        }
    }
    
    /// <summary>
    /// NEW:
    /// This event is fired after the page is loaded into memory, before stored form data is loaded, and before the form is visible.  For example, It may be used to determine the data to be loaded and to perform the data loading.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=1)]
    public virtual EventType BeforeLoadData
    {
        get
        {
            return this._beforeLoadData;
        }
        set
        {
            this._beforeLoadData = value;
        }
    }
    
    /// <summary>
    /// NEW:
    /// This event is fired after the page is loaded is memory, after the data is loaded into the form, but before the form is displayed.  It may be used to perform form activities that are controlled by the loaded data.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=2)]
    public virtual EventType BeforeShowForm
    {
        get
        {
            return this._beforeShowForm;
        }
        set
        {
            this._beforeShowForm = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual EventType BeforeDataSubmit
    {
        get
        {
            return this._beforeDataSubmit;
        }
        set
        {
            this._beforeDataSubmit = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual EventType BeforeCloseForm
    {
        get
        {
            return this._beforeCloseForm;
        }
        set
        {
            this._beforeCloseForm = value;
        }
    }
    
    /// <summary>
    /// Optional Section that stays at the top of a form.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=5)]
    public virtual SectionItemType Header
    {
        get
        {
            return this._header;
        }
        set
        {
            this._header = value;
        }
    }
    
    /// <summary>
    /// Main Section of form
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=6)]
    public virtual SectionItemType Body
    {
        get
        {
            return this._body;
        }
        set
        {
            this._body = value;
        }
    }
    
    /// <summary>
    /// Optional Section that stays at the bottom of a form.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=7)]
    public virtual SectionItemType Footer
    {
        get
        {
            return this._footer;
        }
        set
        {
            this._footer = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=8)]
    public virtual RulesType Rules
    {
        get
        {
            return this._rules;
        }
        set
        {
            this._rules = value;
        }
    }
    
    /// <summary>
    /// NEW: human readable title for display when choosing forms. Added 4/27/16
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string formTitle
    {
        get
        {
            return this._formTitle;
        }
        set
        {
            this._formTitle = value;
        }
    }
    
    /// <summary>
    /// NEW: filename to use when the current FormDesign instance is saved as a file.
    /// For forms containing responses, the filename may include the formInstanceVersionURI,
    /// but the naming convention may be use-case-specific.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string filename
    {
        get
        {
            return this._filename;
        }
        set
        {
            this._filename = value;
        }
    }
    
    /// <summary>
    /// NEW: URI used to identify the form that that this FormDesign is based upon.  In most cases, this should be a standard form that is modified and/or extended by the current FormDesign.
    /// 
    /// The current template reuses the basedOn IDs whenever the question/answer/semantic context is identical to the original.
    /// 
    /// 5/11/17:  Relying on data element mapping may be a better and more flexible approach than @basedOnURI. In this way, forms could compare data elements to determine if they contain semantic matches, and this is supported better with a more robust code map section.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string basedOnURI
    {
        get
        {
            return this._basedOnURI;
        }
        set
        {
            this._basedOnURI = value;
        }
    }
    
    /// <summary>
    /// NEW: A text identifier that is used to group multiple versions of a single form.  The lineage is constant for all versions of a single kind of form.
    /// 
    /// When appended to @baseURI, it can be used to retrieve all versions of one particular form.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string lineage
    {
        get
        {
            return this._lineage;
        }
        set
        {
            this._lineage = value;
        }
    }
    
    /// <summary>
    /// NEW: @version contains the version text for the current form.  It is designed to be used in conjuction with @baseURI and @lineage.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string version
    {
        get
        {
            return this._version;
        }
        set
        {
            this._version = value;
        }
    }
    
    /// <summary>
    /// NEW: The full URI that uniquely identifies the current form.   It is created by concatenating @baseURI + lineage + version.  Each of the componenets is separated by a single forward slash.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string fullURI
    {
        get
        {
            return this._fullURI;
        }
        set
        {
            this._fullURI = value;
        }
    }
    
    /// <summary>
    /// NEW: The full URI used to identify the form that is the immediate previous version of the current FormDesign
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string prevVersionURI
    {
        get
        {
            return this._prevVersionURI;
        }
        set
        {
            this._prevVersionURI = value;
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a form.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI does not change for each edit session of a form instance.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formInstanceURI
    {
        get
        {
            return this._formInstanceURI;
        }
        set
        {
            this._formInstanceURI = value;
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a form's saved responses.  It is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit/save session of a form instance.  It may be e.g., a new GUID, or a repeat of the formInstanceID followed by a version number.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formInstanceVersionURI
    {
        get
        {
            return this._formInstanceVersionURI;
        }
        set
        {
            this._formInstanceVersionURI = value;
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify the immediate previous instance of a form containing responses.  This is the @formInstanceVersionURI that represents the instance of the form that the user opened up before beginning a new cycle of edit/save.  This attribute is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit session of a form instance.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formPreviousInstanceVersionURI
    {
        get
        {
            return this._formPreviousInstanceVersionURI;
        }
        set
        {
            this._formPreviousInstanceVersionURI = value;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual SectionBaseTypeResponseTypeEnum responseTypeEnum
    {
        get
        {
            if (this._responseTypeEnum.HasValue)
            {
                return this._responseTypeEnum.Value;
            }
            else
            {
                return default(SectionBaseTypeResponseTypeEnum);
            }
        }
        set
        {
            this._responseTypeEnum = value;
        }
    }
    
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public virtual bool responseTypeEnumSpecified
    {
        get
        {
            return this._responseTypeEnum.HasValue;
        }
        set
        {
            if (value==false)
            {
                this._responseTypeEnum = null;
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual SectionBaseTypeResponseStatusEnum responseStatusEnum
    {
        get
        {
            if (this._responseStatusEnum.HasValue)
            {
                return this._responseStatusEnum.Value;
            }
            else
            {
                return default(SectionBaseTypeResponseStatusEnum);
            }
        }
        set
        {
            this._responseStatusEnum = value;
        }
    }
    
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public virtual bool responseStatusEnumSpecified
    {
        get
        {
            return this._responseStatusEnum.HasValue;
        }
        set
        {
            if (value==false)
            {
                this._responseStatusEnum = null;
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(FormDesignType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether BeforeLoadForm should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBeforeLoadForm()
    {
        return (_beforeLoadForm != null);
    }
    
    /// <summary>
    /// Test whether BeforeLoadData should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBeforeLoadData()
    {
        return (_beforeLoadData != null);
    }
    
    /// <summary>
    /// Test whether BeforeShowForm should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBeforeShowForm()
    {
        return (_beforeShowForm != null);
    }
    
    /// <summary>
    /// Test whether BeforeDataSubmit should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBeforeDataSubmit()
    {
        return (_beforeDataSubmit != null);
    }
    
    /// <summary>
    /// Test whether BeforeCloseForm should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBeforeCloseForm()
    {
        return (_beforeCloseForm != null);
    }
    
    /// <summary>
    /// Test whether Header should be serialized
    /// </summary>
    public virtual bool ShouldSerializeHeader()
    {
        return (_header != null);
    }
    
    /// <summary>
    /// Test whether Body should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBody()
    {
        return (_body != null);
    }
    
    /// <summary>
    /// Test whether Footer should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFooter()
    {
        return (_footer != null);
    }
    
    /// <summary>
    /// Test whether Rules should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRules()
    {
        return (_rules != null);
    }
    
    /// <summary>
    /// Test whether formTitle should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformTitle()
    {
        return !string.IsNullOrEmpty(formTitle);
    }
    
    /// <summary>
    /// Test whether filename should be serialized
    /// </summary>
    public virtual bool ShouldSerializefilename()
    {
        return !string.IsNullOrEmpty(filename);
    }
    
    /// <summary>
    /// Test whether basedOnURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializebasedOnURI()
    {
        return !string.IsNullOrEmpty(basedOnURI);
    }
    
    /// <summary>
    /// Test whether lineage should be serialized
    /// </summary>
    public virtual bool ShouldSerializelineage()
    {
        return !string.IsNullOrEmpty(lineage);
    }
    
    /// <summary>
    /// Test whether version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeversion()
    {
        return !string.IsNullOrEmpty(version);
    }
    
    /// <summary>
    /// Test whether fullURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializefullURI()
    {
        return !string.IsNullOrEmpty(fullURI);
    }
    
    /// <summary>
    /// Test whether prevVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeprevVersionURI()
    {
        return !string.IsNullOrEmpty(prevVersionURI);
    }
    
    /// <summary>
    /// Test whether formInstanceURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformInstanceURI()
    {
        return !string.IsNullOrEmpty(formInstanceURI);
    }
    
    /// <summary>
    /// Test whether formInstanceVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformInstanceVersionURI()
    {
        return !string.IsNullOrEmpty(formInstanceVersionURI);
    }
    
    /// <summary>
    /// Test whether formPreviousInstanceVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformPreviousInstanceVersionURI()
    {
        return !string.IsNullOrEmpty(formPreviousInstanceVersionURI);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current FormDesignType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an FormDesignType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output FormDesignType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out FormDesignType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(FormDesignType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out FormDesignType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static FormDesignType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((FormDesignType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static FormDesignType Deserialize(System.IO.Stream s)
    {
        return ((FormDesignType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current FormDesignType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an FormDesignType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output FormDesignType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FormDesignType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(FormDesignType);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out FormDesignType obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out FormDesignType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static FormDesignType LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static FormDesignType LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
