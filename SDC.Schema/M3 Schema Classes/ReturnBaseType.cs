// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// Base type for all atomic data types
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnAtomicType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsAtomicType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RuleSingleSelectionSetsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RuleSelectionTestType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiSelectionSetBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PredicateType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSetValueBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IfType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(WatchedPropertyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FilterPredicateType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListFilterType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetItemAttribValuesType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ScriptCodeBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CompareType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InListType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(BetweenType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyConvertBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(NumFunctionBoolType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeMonadicFunctionsBooleanType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputList_ReturnBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListMonadicFunctionsBoolType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListGetItemAtIndexBoolType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FuncBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringFunctionsBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputStr_ReturnBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringIsNullOrEmptyBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringIsNullBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringIsEmptyBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringLikeBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringContainsBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringEndsWithBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringStartsWithBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefRuleBoolType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefBoolType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ScriptCodeDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FuncDateTimeType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringConvertDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeAddFunctionsDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeDiffFunctionsDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeMonadicFunctionsDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(NiladicFunctionsDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeFunctionsAnyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputList_ReturnDateTimeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListGetItemAtIndexDateTimeType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefRuleDateTimeType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefDateTimeType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FuncIntegerType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerFunctionInteger111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeCompareIntegerType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputList_ReturnIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputStr_ReturnIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StrListIndexOfIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringLengthIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringContainsIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StrListCountIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringCompareIntegerType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefRuleIntegerType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefIntegerType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ScriptCodeStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ParamNumType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(NumTrigNumType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyConvertNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FuncNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListAggregateNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(NumNumFunctionNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetNumAttrValueType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsNumListOrNumType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputList_ReturnNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListMonadicFunctionsNumType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListGetItemAtIndexNumType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefRuleNumType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnAtomicOrListType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsAnyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SetAttrValueType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSetAttrValueType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ScriptCodeNumType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DateTimeFormatStringType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputList_ReturnStrType111))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListAggregateStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListConvertStringType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListGetItemAtIndexStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringFunctionsStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyConvertStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FuncStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetStrAttrValueType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AnyFunctionsStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputStr_ReturnStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringReplaceAtIndexStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringReplacePatternStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringSubstringStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTrimStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringToUpperStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(StringToLowerStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefRuleStrType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefStrType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReturnType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputStr_ReturnType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefRuleType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InputList_ReturnAnyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListGetItemAtIndexAnyType000))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ScriptCodeAnyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FuncType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(LookupEndPointType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetAttrValueType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RefType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public abstract partial class ReturnBaseType : ExtensionBaseType
{
    
    #region Private fields
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ExceptionType _item;
    
    private static XmlSerializer serializer;
    #endregion
    
    [System.Xml.Serialization.XmlElementAttribute("Exception", Order=0)]
    public virtual ExceptionType Item
    {
        get
        {
            return this._item;
        }
        set
        {
            this._item = value;
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReturnBaseType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (_item != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current ReturnBaseType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an ReturnBaseType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output ReturnBaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out ReturnBaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(ReturnBaseType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out ReturnBaseType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static ReturnBaseType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((ReturnBaseType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static ReturnBaseType Deserialize(System.IO.Stream s)
    {
        return ((ReturnBaseType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current ReturnBaseType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an ReturnBaseType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output ReturnBaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReturnBaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(ReturnBaseType);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out ReturnBaseType obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out ReturnBaseType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static ReturnBaseType LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static ReturnBaseType LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
