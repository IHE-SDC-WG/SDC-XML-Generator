// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// Represents questions.  Parent items may be Section, Question, and ListItem.
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
public partial class QuestionItemBaseType : RepeatingType
{
    
    private bool _shouldSerializereadOnly;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ExtensionBaseType _item;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<ResponseChangeType> _responseHistory;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private bool _readOnly;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private System.Nullable<QuestionItemBaseTypeResponseTypeEnum> _responseTypeEnum;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private System.Nullable<QuestionItemBaseTypeResponseStatusEnum> _responseStatusEnum;
    
    private static XmlSerializer serializer;
    
    /// <summary>
    /// QuestionItemBaseType class constructor
    /// </summary>
    public QuestionItemBaseType()
    {
        this._readOnly = false;
    }
    
    [System.Xml.Serialization.XmlElementAttribute("ListField", typeof(ListFieldType), Order=0)]
    [System.Xml.Serialization.XmlElementAttribute("ResponseField", typeof(ResponseFieldType), Order=0)]
    public virtual ExtensionBaseType Item
    {
        get
        {
            return this._item;
        }
        set
        {
            this._item = value;
        }
    }
    
    /// <summary>
    /// For recording metadata and changes about the current answer and any previous (replaced) answers to the current question. Each ResponseHistory element is single unit of response(s), taking place at the same time, to the question.  It records the person who made the change, the DateTime of the change, and the the previous ReplacedResponse.  ReplacedResponse includes each answer selection or fill-in response to the question at the time the change was submitted.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("ResponseHistory", Order=1)]
    public virtual List<ResponseChangeType> ResponseHistory
    {
        get
        {
            return this._responseHistory;
        }
        set
        {
            this._responseHistory = value;
        }
    }
    
    /// <summary>
    /// If @readOnly is set to true, the this field may not be edited by the user, and any default values set by template should be considered part of the stored data set responses, and transmitted by the SubmitForm transaction.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(false)]
    public virtual bool readOnly
    {
        get
        {
            return this._readOnly;
        }
        set
        {
            this._readOnly = value;
            _shouldSerializereadOnly = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual QuestionItemBaseTypeResponseTypeEnum responseTypeEnum
    {
        get
        {
            if (this._responseTypeEnum.HasValue)
            {
                return this._responseTypeEnum.Value;
            }
            else
            {
                return default(QuestionItemBaseTypeResponseTypeEnum);
            }
        }
        set
        {
            this._responseTypeEnum = value;
        }
    }
    
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public virtual bool responseTypeEnumSpecified
    {
        get
        {
            return this._responseTypeEnum.HasValue;
        }
        set
        {
            if (value==false)
            {
                this._responseTypeEnum = null;
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual QuestionItemBaseTypeResponseStatusEnum responseStatusEnum
    {
        get
        {
            if (this._responseStatusEnum.HasValue)
            {
                return this._responseStatusEnum.Value;
            }
            else
            {
                return default(QuestionItemBaseTypeResponseStatusEnum);
            }
        }
        set
        {
            this._responseStatusEnum = value;
        }
    }
    
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public virtual bool responseStatusEnumSpecified
    {
        get
        {
            return this._responseStatusEnum.HasValue;
        }
        set
        {
            if (value==false)
            {
                this._responseStatusEnum = null;
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(QuestionItemBaseType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether ResponseHistory should be serialized
    /// </summary>
    public virtual bool ShouldSerializeResponseHistory()
    {
        return ResponseHistory != null && ResponseHistory.Count > 0;
    }
    
    /// <summary>
    /// Test whether readOnly should be serialized
    /// </summary>
    public virtual bool ShouldSerializereadOnly()
    {
        if (_shouldSerializereadOnly)
        {
            return true;
        }
        return (_readOnly != default(bool));
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (_item != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current QuestionItemBaseType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an QuestionItemBaseType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output QuestionItemBaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out QuestionItemBaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(QuestionItemBaseType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out QuestionItemBaseType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static QuestionItemBaseType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((QuestionItemBaseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static QuestionItemBaseType Deserialize(System.IO.Stream s)
    {
        return ((QuestionItemBaseType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current QuestionItemBaseType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an QuestionItemBaseType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output QuestionItemBaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out QuestionItemBaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(QuestionItemBaseType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out QuestionItemBaseType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static QuestionItemBaseType LoadFromFile(string fileName)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
