// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// A model structure for an Organization object.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
public partial class OrganizationType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _orgName;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _department;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<AddressType> _streetAddress;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<EmailType> _email;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<PhoneType> _phone;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<anyURI_Stype> _webURL;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<string_Stype> _role;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<PersonType> _contactPerson;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<IdentifierType> _identifier;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _usage;
    
    private static XmlSerializer serializer;
    
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
    public virtual string_Stype OrgName
    {
        get
        {
            return this._orgName;
        }
        set
        {
            this._orgName = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=1)]
    public virtual string_Stype Department
    {
        get
        {
            return this._department;
        }
        set
        {
            this._department = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("StreetAddress", Order=2)]
    public virtual List<AddressType> StreetAddress
    {
        get
        {
            return this._streetAddress;
        }
        set
        {
            this._streetAddress = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("Email", Order=3)]
    public virtual List<EmailType> Email
    {
        get
        {
            return this._email;
        }
        set
        {
            this._email = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("Phone", Order=4)]
    public virtual List<PhoneType> Phone
    {
        get
        {
            return this._phone;
        }
        set
        {
            this._phone = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("WebURL", Order=5)]
    public virtual List<anyURI_Stype> WebURL
    {
        get
        {
            return this._webURL;
        }
        set
        {
            this._webURL = value;
        }
    }
    
    /// <summary>
    /// Role of the organization, e.g., creator, copyright
    /// holder, accreditor, certifier, curator, etc.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("Role", Order=6)]
    public virtual List<string_Stype> Role
    {
        get
        {
            return this._role;
        }
        set
        {
            this._role = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("ContactPerson", Order=7)]
    public virtual List<PersonType> ContactPerson
    {
        get
        {
            return this._contactPerson;
        }
        set
        {
            this._contactPerson = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("Identifier", Order=8)]
    public virtual List<IdentifierType> Identifier
    {
        get
        {
            return this._identifier;
        }
        set
        {
            this._identifier = value;
        }
    }
    
    /// <summary>
    /// When this organization should be
    /// contacted.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=9)]
    public virtual string_Stype Usage
    {
        get
        {
            return this._usage;
        }
        set
        {
            this._usage = value;
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrganizationType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether StreetAddress should be serialized
    /// </summary>
    public virtual bool ShouldSerializeStreetAddress()
    {
        return StreetAddress != null && StreetAddress.Count > 0;
    }
    
    /// <summary>
    /// Test whether Email should be serialized
    /// </summary>
    public virtual bool ShouldSerializeEmail()
    {
        return Email != null && Email.Count > 0;
    }
    
    /// <summary>
    /// Test whether Phone should be serialized
    /// </summary>
    public virtual bool ShouldSerializePhone()
    {
        return Phone != null && Phone.Count > 0;
    }
    
    /// <summary>
    /// Test whether WebURL should be serialized
    /// </summary>
    public virtual bool ShouldSerializeWebURL()
    {
        return WebURL != null && WebURL.Count > 0;
    }
    
    /// <summary>
    /// Test whether Role should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRole()
    {
        return Role != null && Role.Count > 0;
    }
    
    /// <summary>
    /// Test whether ContactPerson should be serialized
    /// </summary>
    public virtual bool ShouldSerializeContactPerson()
    {
        return ContactPerson != null && ContactPerson.Count > 0;
    }
    
    /// <summary>
    /// Test whether Identifier should be serialized
    /// </summary>
    public virtual bool ShouldSerializeIdentifier()
    {
        return Identifier != null && Identifier.Count > 0;
    }
    
    /// <summary>
    /// Test whether OrgName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOrgName()
    {
        return (_orgName != null);
    }
    
    /// <summary>
    /// Test whether Department should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDepartment()
    {
        return (_department != null);
    }
    
    /// <summary>
    /// Test whether Usage should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUsage()
    {
        return (_usage != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current OrganizationType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an OrganizationType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output OrganizationType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out OrganizationType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(OrganizationType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out OrganizationType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static OrganizationType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((OrganizationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static OrganizationType Deserialize(System.IO.Stream s)
    {
        return ((OrganizationType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current OrganizationType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an OrganizationType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output OrganizationType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out OrganizationType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(OrganizationType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out OrganizationType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static OrganizationType LoadFromFile(string fileName)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
