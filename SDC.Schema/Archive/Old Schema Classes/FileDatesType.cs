// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

/// <summary>
/// List of standard kinds of dates that may apply to a file or its usage.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
public partial class FileDatesType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _fileDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<dateTime_Stype> _previousRevisionDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _releaseDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _effectiveDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _firstReleaseDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _usageStartDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _retirementDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private List<dateTime_Stype> _otherDate;
    
    private static XmlSerializer serializer;
    
    [System.Xml.Serialization.XmlElementAttribute(Order=0)]
    public virtual dateTime_Stype FileDate
    {
        get
        {
            return this._fileDate;
        }
        set
        {
            this._fileDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("PreviousRevisionDate", Order=1)]
    public virtual List<dateTime_Stype> PreviousRevisionDate
    {
        get
        {
            return this._previousRevisionDate;
        }
        set
        {
            this._previousRevisionDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=2)]
    public virtual dateTime_Stype ReleaseDate
    {
        get
        {
            return this._releaseDate;
        }
        set
        {
            this._releaseDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual dateTime_Stype EffectiveDate
    {
        get
        {
            return this._effectiveDate;
        }
        set
        {
            this._effectiveDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual dateTime_Stype FirstReleaseDate
    {
        get
        {
            return this._firstReleaseDate;
        }
        set
        {
            this._firstReleaseDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=5)]
    public virtual dateTime_Stype UsageStartDate
    {
        get
        {
            return this._usageStartDate;
        }
        set
        {
            this._usageStartDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=6)]
    public virtual dateTime_Stype RetirementDate
    {
        get
        {
            return this._retirementDate;
        }
        set
        {
            this._retirementDate = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("OtherDate", Order=7)]
    public virtual List<dateTime_Stype> OtherDate
    {
        get
        {
            return this._otherDate;
        }
        set
        {
            this._otherDate = value;
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(FileDatesType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether PreviousRevisionDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializePreviousRevisionDate()
    {
        return PreviousRevisionDate != null && PreviousRevisionDate.Count > 0;
    }
    
    /// <summary>
    /// Test whether OtherDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOtherDate()
    {
        return OtherDate != null && OtherDate.Count > 0;
    }
    
    /// <summary>
    /// Test whether FileDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileDate()
    {
        return (_fileDate != null);
    }
    
    /// <summary>
    /// Test whether ReleaseDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeReleaseDate()
    {
        return (_releaseDate != null);
    }
    
    /// <summary>
    /// Test whether EffectiveDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeEffectiveDate()
    {
        return (_effectiveDate != null);
    }
    
    /// <summary>
    /// Test whether FirstReleaseDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFirstReleaseDate()
    {
        return (_firstReleaseDate != null);
    }
    
    /// <summary>
    /// Test whether UsageStartDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUsageStartDate()
    {
        return (_usageStartDate != null);
    }
    
    /// <summary>
    /// Test whether RetirementDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeRetirementDate()
    {
        return (_retirementDate != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current FileDatesType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an FileDatesType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output FileDatesType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out FileDatesType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(FileDatesType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out FileDatesType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static FileDatesType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((FileDatesType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static FileDatesType Deserialize(System.IO.Stream s)
    {
        return ((FileDatesType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current FileDatesType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an FileDatesType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output FileDatesType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out FileDatesType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(FileDatesType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out FileDatesType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static FileDatesType LoadFromFile(string fileName)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
