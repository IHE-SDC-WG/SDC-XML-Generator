// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(TypeName="String.PatternMatch.ListType000", Namespace="urn:ihe:qrph:sdc:2016")]
public partial class StringPatternMatchListType000 : InputStr_ReturnListType
{
    
    #region Private fields
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _patternType;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _pattern;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _startItem;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _startMatch;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _count;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private StringPatternMatchListType000X_flags _x_flags;
    
    private static XmlSerializer serializer;
    #endregion
    
    /// <summary>
    /// StringPatternMatchListType000 class constructor
    /// </summary>
    public StringPatternMatchListType000()
    {
        this._x_flags = StringPatternMatchListType000X_flags.all;
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string patternType
    {
        get
        {
            return this._patternType;
        }
        set
        {
            this._patternType = value;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string pattern
    {
        get
        {
            return this._pattern;
        }
        set
        {
            this._pattern = value;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public virtual string startItem
    {
        get
        {
            return this._startItem;
        }
        set
        {
            this._startItem = value;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public virtual string startMatch
    {
        get
        {
            return this._startMatch;
        }
        set
        {
            this._startMatch = value;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public virtual string count
    {
        get
        {
            return this._count;
        }
        set
        {
            this._count = value;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(StringPatternMatchListType000X_flags.all)]
    public virtual StringPatternMatchListType000X_flags X_flags
    {
        get
        {
            return this._x_flags;
        }
        set
        {
            this._x_flags = value;
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(StringPatternMatchListType000));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether patternType should be serialized
    /// </summary>
    public virtual bool ShouldSerializepatternType()
    {
        return !string.IsNullOrEmpty(patternType);
    }
    
    /// <summary>
    /// Test whether pattern should be serialized
    /// </summary>
    public virtual bool ShouldSerializepattern()
    {
        return !string.IsNullOrEmpty(pattern);
    }
    
    /// <summary>
    /// Test whether startItem should be serialized
    /// </summary>
    public virtual bool ShouldSerializestartItem()
    {
        return !string.IsNullOrEmpty(startItem);
    }
    
    /// <summary>
    /// Test whether startMatch should be serialized
    /// </summary>
    public virtual bool ShouldSerializestartMatch()
    {
        return !string.IsNullOrEmpty(startMatch);
    }
    
    /// <summary>
    /// Test whether count should be serialized
    /// </summary>
    public virtual bool ShouldSerializecount()
    {
        return !string.IsNullOrEmpty(count);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current StringPatternMatchListType000 object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an StringPatternMatchListType000 object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output StringPatternMatchListType000 object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out StringPatternMatchListType000 obj, out System.Exception exception)
    {
        exception = null;
        obj = default(StringPatternMatchListType000);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out StringPatternMatchListType000 obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static StringPatternMatchListType000 Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((StringPatternMatchListType000)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static StringPatternMatchListType000 Deserialize(System.IO.Stream s)
    {
        return ((StringPatternMatchListType000)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current StringPatternMatchListType000 object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an StringPatternMatchListType000 object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output StringPatternMatchListType000 object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out StringPatternMatchListType000 obj, out System.Exception exception)
    {
        exception = null;
        obj = default(StringPatternMatchListType000);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out StringPatternMatchListType000 obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out StringPatternMatchListType000 obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static StringPatternMatchListType000 LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static StringPatternMatchListType000 LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
