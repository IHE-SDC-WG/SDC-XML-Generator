// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(TypeName="DateTimeFunctions.AnyType", Namespace="urn:ihe:qrph:sdc:2016")]
public partial class DateTimeFunctionsAnyType : ReturnDateTimeType
{
    
    #region Private fields
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeType _x_LiteralDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ListGetItemAtIndexDateTimeType000 _getListItemDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private NiladicFunctionsDateTimeType _niladicFunctionsDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeMonadicFunctionsDateTimeType _dateTimeMonadicFunctionsDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeMonadicFunctionsBooleanType _dateTimeMonadicFunctionsBoolean;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeDiffFunctionsDateTimeType _dateTimeDiffFunctionsDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeAddFunctionsDateTimeType _dateTimeAddFunctionsDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeFormatStringType _dateTimeFormatString;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private StringConvertDateTimeType _stringParseDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeCompareIntegerType111 _dateTimeCompareInteger;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DateTimeAddFunctionsDateTimeType _dateTimeListFunctions;
    
    private static XmlSerializer serializer;
    #endregion
    
    [System.Xml.Serialization.XmlElementAttribute(Order=0)]
    public virtual DateTimeType X_LiteralDateTime
    {
        get
        {
            return this._x_LiteralDateTime;
        }
        set
        {
            this._x_LiteralDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("GetListItem.DateTime", Order=1)]
    public virtual ListGetItemAtIndexDateTimeType000 GetListItemDateTime
    {
        get
        {
            return this._getListItemDateTime;
        }
        set
        {
            this._getListItemDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("NiladicFunctions.DateTime", Order=2)]
    public virtual NiladicFunctionsDateTimeType NiladicFunctionsDateTime
    {
        get
        {
            return this._niladicFunctionsDateTime;
        }
        set
        {
            this._niladicFunctionsDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DateTime.MonadicFunctions.DateTime", Order=3)]
    public virtual DateTimeMonadicFunctionsDateTimeType DateTimeMonadicFunctionsDateTime
    {
        get
        {
            return this._dateTimeMonadicFunctionsDateTime;
        }
        set
        {
            this._dateTimeMonadicFunctionsDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DateTime.MonadicFunctions.Boolean", Order=4)]
    public virtual DateTimeMonadicFunctionsBooleanType DateTimeMonadicFunctionsBoolean
    {
        get
        {
            return this._dateTimeMonadicFunctionsBoolean;
        }
        set
        {
            this._dateTimeMonadicFunctionsBoolean = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DateTime.DiffFunctions.DateTime", Order=5)]
    public virtual DateTimeDiffFunctionsDateTimeType DateTimeDiffFunctionsDateTime
    {
        get
        {
            return this._dateTimeDiffFunctionsDateTime;
        }
        set
        {
            this._dateTimeDiffFunctionsDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DateTime.AddFunctions.DateTime", Order=6)]
    public virtual DateTimeAddFunctionsDateTimeType DateTimeAddFunctionsDateTime
    {
        get
        {
            return this._dateTimeAddFunctionsDateTime;
        }
        set
        {
            this._dateTimeAddFunctionsDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DateTime.Format.String", Order=7)]
    public virtual DateTimeFormatStringType DateTimeFormatString
    {
        get
        {
            return this._dateTimeFormatString;
        }
        set
        {
            this._dateTimeFormatString = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("String.Parse.DateTime", Order=8)]
    public virtual StringConvertDateTimeType StringParseDateTime
    {
        get
        {
            return this._stringParseDateTime;
        }
        set
        {
            this._stringParseDateTime = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DateTime.Compare.Integer", Order=9)]
    public virtual DateTimeCompareIntegerType111 DateTimeCompareInteger
    {
        get
        {
            return this._dateTimeCompareInteger;
        }
        set
        {
            this._dateTimeCompareInteger = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=10)]
    public virtual DateTimeAddFunctionsDateTimeType DateTimeListFunctions
    {
        get
        {
            return this._dateTimeListFunctions;
        }
        set
        {
            this._dateTimeListFunctions = value;
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(DateTimeFunctionsAnyType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether X_LiteralDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeX_LiteralDateTime()
    {
        return (_x_LiteralDateTime != null);
    }
    
    /// <summary>
    /// Test whether GetListItemDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeGetListItemDateTime()
    {
        return (_getListItemDateTime != null);
    }
    
    /// <summary>
    /// Test whether NiladicFunctionsDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeNiladicFunctionsDateTime()
    {
        return (_niladicFunctionsDateTime != null);
    }
    
    /// <summary>
    /// Test whether DateTimeMonadicFunctionsDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeMonadicFunctionsDateTime()
    {
        return (_dateTimeMonadicFunctionsDateTime != null);
    }
    
    /// <summary>
    /// Test whether DateTimeMonadicFunctionsBoolean should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeMonadicFunctionsBoolean()
    {
        return (_dateTimeMonadicFunctionsBoolean != null);
    }
    
    /// <summary>
    /// Test whether DateTimeDiffFunctionsDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeDiffFunctionsDateTime()
    {
        return (_dateTimeDiffFunctionsDateTime != null);
    }
    
    /// <summary>
    /// Test whether DateTimeAddFunctionsDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeAddFunctionsDateTime()
    {
        return (_dateTimeAddFunctionsDateTime != null);
    }
    
    /// <summary>
    /// Test whether DateTimeFormatString should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeFormatString()
    {
        return (_dateTimeFormatString != null);
    }
    
    /// <summary>
    /// Test whether StringParseDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeStringParseDateTime()
    {
        return (_stringParseDateTime != null);
    }
    
    /// <summary>
    /// Test whether DateTimeCompareInteger should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeCompareInteger()
    {
        return (_dateTimeCompareInteger != null);
    }
    
    /// <summary>
    /// Test whether DateTimeListFunctions should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDateTimeListFunctions()
    {
        return (_dateTimeListFunctions != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current DateTimeFunctionsAnyType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Encoding = encoding;
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = " ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream, encoding);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    public virtual string Serialize()
    {
        return Serialize(System.Text.Encoding.UTF8);
    }
    
    /// <summary>
    /// Deserializes workflow markup into an DateTimeFunctionsAnyType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output DateTimeFunctionsAnyType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out DateTimeFunctionsAnyType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(DateTimeFunctionsAnyType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out DateTimeFunctionsAnyType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static DateTimeFunctionsAnyType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((DateTimeFunctionsAnyType)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static DateTimeFunctionsAnyType Deserialize(System.IO.Stream s)
    {
        return ((DateTimeFunctionsAnyType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current DateTimeFunctionsAnyType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName, encoding);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }
    
    public virtual void SaveToFile(string fileName)
    {
        SaveToFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize(encoding);
            streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an DateTimeFunctionsAnyType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output DateTimeFunctionsAnyType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DateTimeFunctionsAnyType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(DateTimeFunctionsAnyType);
        try
        {
            obj = LoadFromFile(fileName, encoding);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out DateTimeFunctionsAnyType obj, out System.Exception exception)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }
    
    public static bool LoadFromFile(string fileName, out DateTimeFunctionsAnyType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static DateTimeFunctionsAnyType LoadFromFile(string fileName)
    {
        return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }
    
    public new static DateTimeFunctionsAnyType LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file, encoding);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
