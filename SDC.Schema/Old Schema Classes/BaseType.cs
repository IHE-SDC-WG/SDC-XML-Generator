// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

[System.Xml.Serialization.XmlIncludeAttribute(typeof(gYearMonth_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gYearMonth_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(dayTimeDuration_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(dayTimeDuration_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IfBoolCompareType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(MaxExclusiveType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(MaxInclusiveType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(MinExclusiveType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(MinInclusiveType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemNameType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetCodeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DestinationType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangeTrackingType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReplacedIDsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(TargetItemNameType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaCodeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CountryCodeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(dateTime_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(dateTime_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeMatchType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PhoneNumberType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(yearMonthDuration_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(yearMonthDuration_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(XML_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(XML_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedShort_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedShort_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedLong_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedLong_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedInt_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedInt_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedByte_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(unsignedByte_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(time_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(time_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(string_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FileHashType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(TargetItemXPathType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(LanguageCodeISO6393_Type))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(UnitsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AcceptabilityType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(string_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(short_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(short_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(positiveInteger_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(positiveInteger_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(nonPositiveInteger_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(nonPositiveInteger_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(nonNegativeInteger_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(nonNegativeInteger_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(negativeInteger_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(negativeInteger_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(long_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(long_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(HTML_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(HTML_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(hexBinary_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(hexBinary_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gYear_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gYear_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gMonthDay_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gMonthDay_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gMonth_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gMonth_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gDay_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(gDay_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(float_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(float_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(double_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(double_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(decimal_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(decimal_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(dateTimeStamp_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(dateTimeStamp_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(date_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(date_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(byte_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(byte_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(integer_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(integer_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(int_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(int_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(duration_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(duration_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(boolean_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(boolean_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(base64Binary_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(HashType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(base64Binary_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(anyURI_Stype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(TargetItemIDType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(anyURI_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(anyType_DEtype))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ExtensionType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ExtensionBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RulesType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangedSelectedItemsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReplacedResponseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ResponseChangeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListFieldType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChildItemsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ResponseFieldType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemResponseFieldType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActValidateFormType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSendReportType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActShowReportType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSaveResponsesType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActShowFormType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActShowMessageType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSetValueType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SetPropertyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ThenType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PredicateBetweenType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PredicateInListType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PredicateCompareType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ScriptCodeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ExpressionType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PredicateType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ExclusiveItemPairsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetPropertyValuesType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IfType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(WatchedPropertyType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IfThenType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(OnEventType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedExtensionType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangedListItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DisplayedType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ButtonItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RepeatingType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FormDesignType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(InjectFormType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActInjectType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(LinkType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangeType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ComplianceRuleType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SubmissionRuleType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ProvenanceType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AssociatedFilesType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(LanguageType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ApprovalType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FileDatesType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FileUsageType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactsType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangedFieldType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangeLogType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(VersionType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(FileType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifierType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PhoneType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(OrganizationType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(JobType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(NameType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(PersonType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeSystemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(CodingType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ParameterType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(WebServiceType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(LookupEndPointType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RichTextType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSendMessageType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(BlobType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTypes_SType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTypes_DEType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
public abstract partial class BaseType
{
    
    private bool _shouldSerializeorder;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _name;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _type;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _styleClass;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private System.Nullable<decimal> _order;
    
    private static XmlSerializer serializer;
    
    /// <summary>
    /// Developer assigned identifier, similar to a unique control/object
    /// name, used to provide the ability for programmatic manipulation of an
    /// element.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
    public virtual string name
    {
        get
        {
            return this._name;
        }
        set
        {
            this._name = value;
        }
    }
    
    /// <summary>
    /// The @type attribute can contain custom metadata "tokens" for the
    /// element, chosen from a standardized list of terms. Tokens are short alphanumeric
    /// text strings, defined by the W3C Schema NMTOKEN specification, that are defined
    /// in an Implementation Guide. The type xsd:NMTOKEN represents a single string
    /// token. NMTOKEN values may consist of letters, digits, periods ( . ), hyphens ( -
    /// ), underscores ( _ ), and colons ( : ). They may start with any of these
    /// characters. (www.datypic.com/sc/xsd/t-xsd_NMTOKEN.html) @type tokens may be
    /// specific for one or more kinds of SDC elements. Multiple tokens in the type
    /// attribute should be separated by whitespace. Type tokens may be used to specify
    /// special handling by an application, and are usually used to define form display
    /// constraints, but may include other custom metadata as well. Style metadata
    /// should generally be handled with @styleClass rather than @type. @type token
    /// examples include: tooltip, statusLineText, alignTopLeft, align:bottom,
    /// _pageBreak-after, etc. @type metadata should generally not affect the
    /// information content of a form.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
    public virtual string type
    {
        get
        {
            return this._type;
        }
        set
        {
            this._type = value;
        }
    }
    
    /// <summary>
    /// Developer assigned class name for display styling, generally for
    /// use with an external style sheet.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
    public virtual string styleClass
    {
        get
        {
            return this._styleClass;
        }
        set
        {
            this._styleClass = value;
        }
    }
    
    /// <summary>
    /// @order allows the form template developer to define a sequential
    /// order for elements in a template. This serves the purpose of providing a
    /// definitive/original order to sections, questions, answer choices, etc., when
    /// required for display purposes. This is important when the original XML ordering
    /// may become disrupted due to the use of an implementation technology that does
    /// not natively support ordering (e.g., object collections), and it can also
    /// provide a check on the proper importing of the XML tree during
    /// implementation.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual decimal order
    {
        get
        {
            if (this._order.HasValue)
            {
                return this._order.Value;
            }
            else
            {
                return default(decimal);
            }
        }
        set
        {
            this._order = value;
            _shouldSerializeorder = true;
        }
    }
    
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public virtual bool orderSpecified
    {
        get
        {
            return this._order.HasValue;
        }
        set
        {
            if (value==false)
            {
                this._order = null;
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(BaseType));
            }
            return serializer;
        }
    }
    
    /// <summary>
    /// Test whether order should be serialized
    /// </summary>
    public virtual bool ShouldSerializeorder()
    {
        if (_shouldSerializeorder)
        {
            return true;
        }
        return (_order != default(decimal));
    }
    
    /// <summary>
    /// Test whether name should be serialized
    /// </summary>
    public virtual bool ShouldSerializename()
    {
        return !string.IsNullOrEmpty(name);
    }
    
    /// <summary>
    /// Test whether type should be serialized
    /// </summary>
    public virtual bool ShouldSerializetype()
    {
        return !string.IsNullOrEmpty(type);
    }
    
    /// <summary>
    /// Test whether styleClass should be serialized
    /// </summary>
    public virtual bool ShouldSerializestyleClass()
    {
        return !string.IsNullOrEmpty(styleClass);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current BaseType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try
        {
            memoryStream = new System.IO.MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an BaseType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output BaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out BaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(BaseType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out BaseType obj)
    {
        System.Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public static BaseType Deserialize(string input)
    {
        System.IO.StringReader stringReader = null;
        try
        {
            stringReader = new System.IO.StringReader(input);
            return ((BaseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static BaseType Deserialize(System.IO.Stream s)
    {
        return ((BaseType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current BaseType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (System.Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        System.IO.StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an BaseType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output BaseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out BaseType obj, out System.Exception exception)
    {
        exception = null;
        obj = default(BaseType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (System.Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out BaseType obj)
    {
        System.Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static BaseType LoadFromFile(string fileName)
    {
        System.IO.FileStream file = null;
        System.IO.StreamReader sr = null;
        try
        {
            file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new System.IO.StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
