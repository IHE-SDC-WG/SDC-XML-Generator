// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Reflection;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;

/// <summary>
/// Supports documentation of changes to an SDC SubmitForm answer set.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
[DataContractAttribute(Name="ReplacedResponseType", Namespace="http://healthIT.gov/sdc")]
public partial class ReplacedResponseType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _responseComment;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private PersonType _responseEditor;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _responseDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ExtensionBaseType _item;
    
    private static XmlSerializer serializer;
    
    private ObjectChangeTracker changeTrackerField;
    
    /// <summary>
    /// Comment added to the original response that was replaced, at the time it was first entered.  This comment refers to the response that was replaced, not the replacement activity or the replacement values.
    /// </summary>
    [XmlElementAttribute(Order=0)]
    [DataMemberAttribute(Order=0)]
    public virtual string_Stype ResponseComment
    {
        get
        {
            return _responseComment;
        }
        set
        {
            if ((_responseComment == value))
            {
                return;
            }
            if (((_responseComment == null) 
                        || (_responseComment.Equals(value) != true)))
            {
                _responseComment = value;
                OnPropertyChanged("ResponseComment", value);
            }
        }
    }
    
    /// <summary>
    /// Original editor of the response that was replaced, when it was first entered.  This editor refers to the response that was replaced, not the replacement activity.
    /// </summary>
    [XmlElementAttribute(Order=1)]
    [DataMemberAttribute(Order=1)]
    public virtual PersonType ResponseEditor
    {
        get
        {
            return _responseEditor;
        }
        set
        {
            if ((_responseEditor == value))
            {
                return;
            }
            if (((_responseEditor == null) 
                        || (_responseEditor.Equals(value) != true)))
            {
                _responseEditor = value;
                OnPropertyChanged("ResponseEditor", value);
            }
        }
    }
    
    /// <summary>
    /// Date/Time that the response was first entered.  This date/time refers to the response that was replaced, not the replacement activity.
    /// </summary>
    [XmlElementAttribute(IsNullable=true, Order=2)]
    [DataMemberAttribute(Order=2)]
    public virtual dateTime_Stype ResponseDateTime
    {
        get
        {
            return _responseDateTime;
        }
        set
        {
            if ((_responseDateTime == value))
            {
                return;
            }
            if (((_responseDateTime == null) 
                        || (_responseDateTime.Equals(value) != true)))
            {
                _responseDateTime = value;
                OnPropertyChanged("ResponseDateTime", value);
            }
        }
    }
    
    [XmlElementAttribute("Response", typeof(DataTypes_SType), IsNullable=true, Order=3)]
    [XmlElementAttribute("SelectedItems", typeof(ChangedSelectedItemsType), IsNullable=true, Order=3)]
    [DataMemberAttribute(Name="Response", Order=3)]
    public virtual ExtensionBaseType Item
    {
        get
        {
            return _item;
        }
        set
        {
            if ((_item == value))
            {
                return;
            }
            if (((_item == null) 
                        || (_item.Equals(value) != true)))
            {
                _item = value;
                OnPropertyChanged("Item", value);
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReplacedResponseType));
            }
            return serializer;
        }
    }
    
    [XmlIgnore()]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if ((changeTrackerField == null))
            {
                changeTrackerField = new ObjectChangeTracker(this);
            }
            return changeTrackerField;
        }
    }
    
    /// <summary>
    /// Test whether ResponseComment should be serialized
    /// </summary>
    public virtual bool ShouldSerializeResponseComment()
    {
        return (_responseComment != null);
    }
    
    /// <summary>
    /// Test whether ResponseEditor should be serialized
    /// </summary>
    public virtual bool ShouldSerializeResponseEditor()
    {
        return (_responseEditor != null);
    }
    
    /// <summary>
    /// Test whether ResponseDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeResponseDateTime()
    {
        return (_responseDateTime != null);
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (_item != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current ReplacedResponseType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an ReplacedResponseType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output ReplacedResponseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out ReplacedResponseType obj, out Exception exception)
    {
        exception = null;
        obj = default(ReplacedResponseType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out ReplacedResponseType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static ReplacedResponseType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((ReplacedResponseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static ReplacedResponseType Deserialize(Stream s)
    {
        return ((ReplacedResponseType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current ReplacedResponseType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            FileInfo xmlFile = new FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an ReplacedResponseType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output ReplacedResponseType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out ReplacedResponseType obj, out Exception exception)
    {
        exception = null;
        obj = default(ReplacedResponseType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out ReplacedResponseType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static ReplacedResponseType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
    
    #region Clone method
    /// <summary>
    /// Create a clone of this ReplacedResponseType object
    /// </summary>
    public virtual ReplacedResponseType Clone()
    {
        return ((ReplacedResponseType)(MemberwiseClone()));
    }
    #endregion
}
}
#pragma warning restore
