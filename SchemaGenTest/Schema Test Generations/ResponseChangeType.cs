// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Reflection;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;

/// <summary>
/// Supports addenda and ammendments to reports
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
[DataContractAttribute(Name="ResponseChangeType", Namespace="http://healthIT.gov/sdc")]
public partial class ResponseChangeType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private PersonType _changeEditor;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _changeDateTime;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _changeComment;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ReplacedResponseType _replacedResponse;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string _changeID;
    
    private static XmlSerializer serializer;
    
    private ObjectChangeTracker changeTrackerField;
    
    /// <summary>
    /// The person who changed the previous response to the new response.
    /// </summary>
    [XmlElementAttribute(Order=0)]
    [DataMemberAttribute(Order=0)]
    public virtual PersonType ChangeEditor
    {
        get
        {
            return _changeEditor;
        }
        set
        {
            if ((_changeEditor == value))
            {
                return;
            }
            if (((_changeEditor == null) 
                        || (_changeEditor.Equals(value) != true)))
            {
                _changeEditor = value;
                OnPropertyChanged("ChangeEditor", value);
            }
        }
    }
    
    /// <summary>
    /// The time when the previous response was changed to the new response.
    /// </summary>
    [XmlElementAttribute(Order=1)]
    [DataMemberAttribute(Order=1)]
    public virtual dateTime_Stype ChangeDateTime
    {
        get
        {
            return _changeDateTime;
        }
        set
        {
            if ((_changeDateTime == value))
            {
                return;
            }
            if (((_changeDateTime == null) 
                        || (_changeDateTime.Equals(value) != true)))
            {
                _changeDateTime = value;
                OnPropertyChanged("ChangeDateTime", value);
            }
        }
    }
    
    /// <summary>
    /// A comment describing the change from the previous response to the new response.
    /// </summary>
    [XmlElementAttribute(Order=2)]
    [DataMemberAttribute(Order=2)]
    public virtual string_Stype ChangeComment
    {
        get
        {
            return _changeComment;
        }
        set
        {
            if ((_changeComment == value))
            {
                return;
            }
            if (((_changeComment == null) 
                        || (_changeComment.Equals(value) != true)))
            {
                _changeComment = value;
                OnPropertyChanged("ChangeComment", value);
            }
        }
    }
    
    /// <summary>
    /// A single unit of changes (taking place at the same  time) to the question response(s). This section records the person who made the  change, the DateTime of the change, and the change details. This includes each answer selection or fill-in response to the question  at the time the change was submitted.
    /// </summary>
    [XmlElementAttribute(Order=3)]
    [DataMemberAttribute(Order=3)]
    public virtual ReplacedResponseType ReplacedResponse
    {
        get
        {
            return _replacedResponse;
        }
        set
        {
            if ((_replacedResponse == value))
            {
                return;
            }
            if (((_replacedResponse == null) 
                        || (_replacedResponse.Equals(value) != true)))
            {
                _replacedResponse = value;
                OnPropertyChanged("ReplacedResponse", value);
            }
        }
    }
    
    [XmlAttribute]
    [DataMember]
    public virtual string changeID
    {
        get
        {
            return _changeID;
        }
        set
        {
            if ((_changeID == value))
            {
                return;
            }
            if (((_changeID == null) 
                        || (_changeID.Equals(value) != true)))
            {
                _changeID = value;
                OnPropertyChanged("changeID", value);
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(ResponseChangeType));
            }
            return serializer;
        }
    }
    
    [XmlIgnore()]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if ((changeTrackerField == null))
            {
                changeTrackerField = new ObjectChangeTracker(this);
            }
            return changeTrackerField;
        }
    }
    
    /// <summary>
    /// Test whether ChangeEditor should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangeEditor()
    {
        return (_changeEditor != null);
    }
    
    /// <summary>
    /// Test whether ChangeDateTime should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangeDateTime()
    {
        return (_changeDateTime != null);
    }
    
    /// <summary>
    /// Test whether ChangeComment should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangeComment()
    {
        return (_changeComment != null);
    }
    
    /// <summary>
    /// Test whether ReplacedResponse should be serialized
    /// </summary>
    public virtual bool ShouldSerializeReplacedResponse()
    {
        return (_replacedResponse != null);
    }
    
    /// <summary>
    /// Test whether changeID should be serialized
    /// </summary>
    public virtual bool ShouldSerializechangeID()
    {
        return !string.IsNullOrEmpty(changeID);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current ResponseChangeType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an ResponseChangeType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output ResponseChangeType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out ResponseChangeType obj, out Exception exception)
    {
        exception = null;
        obj = default(ResponseChangeType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out ResponseChangeType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static ResponseChangeType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((ResponseChangeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static ResponseChangeType Deserialize(Stream s)
    {
        return ((ResponseChangeType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current ResponseChangeType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            FileInfo xmlFile = new FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an ResponseChangeType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output ResponseChangeType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out ResponseChangeType obj, out Exception exception)
    {
        exception = null;
        obj = default(ResponseChangeType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out ResponseChangeType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static ResponseChangeType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
    
    #region Clone method
    /// <summary>
    /// Create a clone of this ResponseChangeType object
    /// </summary>
    public virtual ResponseChangeType Clone()
    {
        return ((ResponseChangeType)(MemberwiseClone()));
    }
    #endregion
}
}
#pragma warning restore
