// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Reflection;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;

/// <summary>
/// Inforamtion about changes to file or part of a
/// file.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
[DataContractAttribute(Name="ChangeLogType", Namespace="http://healthIT.gov/sdc")]
public partial class ChangeLogType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ChangedFieldType _changedField;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DataTypes_SType _changedTo;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private DataTypes_SType _changedFrom;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private BindingList<string_Stype> _changeType;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ReplacedIDsType _replaces;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private dateTime_Stype _changeDate;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _changeDescription;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ContactsType _editors;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private ChangeTrackingType _changeTracking;
    
    private static XmlSerializer serializer;
    
    private ObjectChangeTracker changeTrackerField;
    
    [XmlElementAttribute(Order=0)]
    [DataMemberAttribute(Order=0)]
    public virtual ChangedFieldType ChangedField
    {
        get
        {
            return _changedField;
        }
        set
        {
            if ((_changedField == value))
            {
                return;
            }
            if (((_changedField == null) 
                        || (_changedField.Equals(value) != true)))
            {
                _changedField = value;
                OnPropertyChanged("ChangedField", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=1)]
    [DataMemberAttribute(Order=1)]
    public virtual DataTypes_SType ChangedTo
    {
        get
        {
            return _changedTo;
        }
        set
        {
            if ((_changedTo == value))
            {
                return;
            }
            if (((_changedTo == null) 
                        || (_changedTo.Equals(value) != true)))
            {
                _changedTo = value;
                OnPropertyChanged("ChangedTo", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=2)]
    [DataMemberAttribute(Order=2)]
    public virtual DataTypes_SType ChangedFrom
    {
        get
        {
            return _changedFrom;
        }
        set
        {
            if ((_changedFrom == value))
            {
                return;
            }
            if (((_changedFrom == null) 
                        || (_changedFrom.Equals(value) != true)))
            {
                _changedFrom = value;
                OnPropertyChanged("ChangedFrom", value);
            }
        }
    }
    
    [XmlElementAttribute("ChangeType", Order=3)]
    [DataMemberAttribute(Order=3)]
    public virtual BindingList<string_Stype> ChangeType
    {
        get
        {
            return _changeType;
        }
        set
        {
            if ((_changeType == value))
            {
                return;
            }
            if (((_changeType == null) 
                        || (_changeType.Equals(value) != true)))
            {
                _changeType = value;
                OnPropertyChanged("ChangeType", value);
            }
        }
    }
    
    /// <summary>
    /// The retired/deprecated item that is being replaced.
    /// </summary>
    [XmlElementAttribute(Order=4)]
    [DataMemberAttribute(Order=4)]
    public virtual ReplacedIDsType Replaces
    {
        get
        {
            return _replaces;
        }
        set
        {
            if ((_replaces == value))
            {
                return;
            }
            if (((_replaces == null) 
                        || (_replaces.Equals(value) != true)))
            {
                _replaces = value;
                OnPropertyChanged("Replaces", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=5)]
    [DataMemberAttribute(Order=5)]
    public virtual dateTime_Stype ChangeDate
    {
        get
        {
            return _changeDate;
        }
        set
        {
            if ((_changeDate == value))
            {
                return;
            }
            if (((_changeDate == null) 
                        || (_changeDate.Equals(value) != true)))
            {
                _changeDate = value;
                OnPropertyChanged("ChangeDate", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=6)]
    [DataMemberAttribute(Order=6)]
    public virtual string_Stype ChangeDescription
    {
        get
        {
            return _changeDescription;
        }
        set
        {
            if ((_changeDescription == value))
            {
                return;
            }
            if (((_changeDescription == null) 
                        || (_changeDescription.Equals(value) != true)))
            {
                _changeDescription = value;
                OnPropertyChanged("ChangeDescription", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=7)]
    [DataMemberAttribute(Order=7)]
    public virtual ContactsType Editors
    {
        get
        {
            return _editors;
        }
        set
        {
            if ((_editors == value))
            {
                return;
            }
            if (((_editors == null) 
                        || (_editors.Equals(value) != true)))
            {
                _editors = value;
                OnPropertyChanged("Editors", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=8)]
    [DataMemberAttribute(Order=8)]
    public virtual ChangeTrackingType ChangeTracking
    {
        get
        {
            return _changeTracking;
        }
        set
        {
            if ((_changeTracking == value))
            {
                return;
            }
            if (((_changeTracking == null) 
                        || (_changeTracking.Equals(value) != true)))
            {
                _changeTracking = value;
                OnPropertyChanged("ChangeTracking", value);
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(ChangeLogType));
            }
            return serializer;
        }
    }
    
    [XmlIgnore()]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if ((changeTrackerField == null))
            {
                changeTrackerField = new ObjectChangeTracker(this);
            }
            return changeTrackerField;
        }
    }
    
    /// <summary>
    /// Test whether ChangedField should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangedField()
    {
        return (_changedField != null);
    }
    
    /// <summary>
    /// Test whether ChangedTo should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangedTo()
    {
        return (_changedTo != null);
    }
    
    /// <summary>
    /// Test whether ChangedFrom should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangedFrom()
    {
        return (_changedFrom != null);
    }
    
    /// <summary>
    /// Test whether Replaces should be serialized
    /// </summary>
    public virtual bool ShouldSerializeReplaces()
    {
        return (_replaces != null);
    }
    
    /// <summary>
    /// Test whether ChangeDate should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangeDate()
    {
        return (_changeDate != null);
    }
    
    /// <summary>
    /// Test whether ChangeDescription should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangeDescription()
    {
        return (_changeDescription != null);
    }
    
    /// <summary>
    /// Test whether Editors should be serialized
    /// </summary>
    public virtual bool ShouldSerializeEditors()
    {
        return (_editors != null);
    }
    
    /// <summary>
    /// Test whether ChangeTracking should be serialized
    /// </summary>
    public virtual bool ShouldSerializeChangeTracking()
    {
        return (_changeTracking != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current ChangeLogType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an ChangeLogType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output ChangeLogType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out ChangeLogType obj, out Exception exception)
    {
        exception = null;
        obj = default(ChangeLogType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out ChangeLogType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static ChangeLogType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((ChangeLogType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static ChangeLogType Deserialize(Stream s)
    {
        return ((ChangeLogType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current ChangeLogType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            FileInfo xmlFile = new FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an ChangeLogType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output ChangeLogType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out ChangeLogType obj, out Exception exception)
    {
        exception = null;
        obj = default(ChangeLogType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out ChangeLogType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static ChangeLogType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
    
    #region Clone method
    /// <summary>
    /// Create a clone of this ChangeLogType object
    /// </summary>
    public virtual ChangeLogType Clone()
    {
        return ((ChangeLogType)(MemberwiseClone()));
    }
    #endregion
}
}
#pragma warning restore
