// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Reflection;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;

/// <summary>
/// Type of address, e.g., home, office, etc
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
[DataContractAttribute(Name="AddressType", Namespace="http://healthIT.gov/sdc")]
public partial class AddressType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _addressType1;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private BindingList<string_Stype> _internalAddress;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private BindingList<string_Stype> _addressLine;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _city;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _jurisdiction;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _state;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _postalCode;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _country;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _usage;
    
    private static XmlSerializer serializer;
    
    private ObjectChangeTracker changeTrackerField;
    
    [XmlElementAttribute("AddressType", Order=0)]
    [DataMemberAttribute(Name="AddressType", Order=0)]
    public virtual string_Stype AddressType1
    {
        get
        {
            return _addressType1;
        }
        set
        {
            if ((_addressType1 == value))
            {
                return;
            }
            if (((_addressType1 == null) 
                        || (_addressType1.Equals(value) != true)))
            {
                _addressType1 = value;
                OnPropertyChanged("AddressType1", value);
            }
        }
    }
    
    [XmlElementAttribute("InternalAddress", Order=1)]
    [DataMemberAttribute(Order=1)]
    public virtual BindingList<string_Stype> InternalAddress
    {
        get
        {
            return _internalAddress;
        }
        set
        {
            if ((_internalAddress == value))
            {
                return;
            }
            if (((_internalAddress == null) 
                        || (_internalAddress.Equals(value) != true)))
            {
                _internalAddress = value;
                OnPropertyChanged("InternalAddress", value);
            }
        }
    }
    
    [XmlElementAttribute("AddressLine", Order=2)]
    [DataMemberAttribute(Order=2)]
    public virtual BindingList<string_Stype> AddressLine
    {
        get
        {
            return _addressLine;
        }
        set
        {
            if ((_addressLine == value))
            {
                return;
            }
            if (((_addressLine == null) 
                        || (_addressLine.Equals(value) != true)))
            {
                _addressLine = value;
                OnPropertyChanged("AddressLine", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=3)]
    [DataMemberAttribute(Order=3)]
    public virtual string_Stype City
    {
        get
        {
            return _city;
        }
        set
        {
            if ((_city == value))
            {
                return;
            }
            if (((_city == null) 
                        || (_city.Equals(value) != true)))
            {
                _city = value;
                OnPropertyChanged("City", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=4)]
    [DataMemberAttribute(Order=4)]
    public virtual string_Stype Jurisdiction
    {
        get
        {
            return _jurisdiction;
        }
        set
        {
            if ((_jurisdiction == value))
            {
                return;
            }
            if (((_jurisdiction == null) 
                        || (_jurisdiction.Equals(value) != true)))
            {
                _jurisdiction = value;
                OnPropertyChanged("Jurisdiction", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=5)]
    [DataMemberAttribute(Order=5)]
    public virtual string_Stype State
    {
        get
        {
            return _state;
        }
        set
        {
            if ((_state == value))
            {
                return;
            }
            if (((_state == null) 
                        || (_state.Equals(value) != true)))
            {
                _state = value;
                OnPropertyChanged("State", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=6)]
    [DataMemberAttribute(Order=6)]
    public virtual string_Stype PostalCode
    {
        get
        {
            return _postalCode;
        }
        set
        {
            if ((_postalCode == value))
            {
                return;
            }
            if (((_postalCode == null) 
                        || (_postalCode.Equals(value) != true)))
            {
                _postalCode = value;
                OnPropertyChanged("PostalCode", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=7)]
    [DataMemberAttribute(Order=7)]
    public virtual string_Stype Country
    {
        get
        {
            return _country;
        }
        set
        {
            if ((_country == value))
            {
                return;
            }
            if (((_country == null) 
                        || (_country.Equals(value) != true)))
            {
                _country = value;
                OnPropertyChanged("Country", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=8)]
    [DataMemberAttribute(Order=8)]
    public virtual string_Stype Usage
    {
        get
        {
            return _usage;
        }
        set
        {
            if ((_usage == value))
            {
                return;
            }
            if (((_usage == null) 
                        || (_usage.Equals(value) != true)))
            {
                _usage = value;
                OnPropertyChanged("Usage", value);
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(AddressType));
            }
            return serializer;
        }
    }
    
    [XmlIgnore()]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if ((changeTrackerField == null))
            {
                changeTrackerField = new ObjectChangeTracker(this);
            }
            return changeTrackerField;
        }
    }
    
    /// <summary>
    /// Test whether AddressType1 should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAddressType1()
    {
        return (_addressType1 != null);
    }
    
    /// <summary>
    /// Test whether City should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCity()
    {
        return (_city != null);
    }
    
    /// <summary>
    /// Test whether Jurisdiction should be serialized
    /// </summary>
    public virtual bool ShouldSerializeJurisdiction()
    {
        return (_jurisdiction != null);
    }
    
    /// <summary>
    /// Test whether State should be serialized
    /// </summary>
    public virtual bool ShouldSerializeState()
    {
        return (_state != null);
    }
    
    /// <summary>
    /// Test whether PostalCode should be serialized
    /// </summary>
    public virtual bool ShouldSerializePostalCode()
    {
        return (_postalCode != null);
    }
    
    /// <summary>
    /// Test whether Country should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCountry()
    {
        return (_country != null);
    }
    
    /// <summary>
    /// Test whether Usage should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUsage()
    {
        return (_usage != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current AddressType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an AddressType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output AddressType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out AddressType obj, out Exception exception)
    {
        exception = null;
        obj = default(AddressType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out AddressType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static AddressType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((AddressType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static AddressType Deserialize(Stream s)
    {
        return ((AddressType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current AddressType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            FileInfo xmlFile = new FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an AddressType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output AddressType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out AddressType obj, out Exception exception)
    {
        exception = null;
        obj = default(AddressType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out AddressType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static AddressType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
    
    #region Clone method
    /// <summary>
    /// Create a clone of this AddressType object
    /// </summary>
    public virtual AddressType Clone()
    {
        return ((AddressType)(MemberwiseClone()));
    }
    #endregion
}
}
#pragma warning restore
