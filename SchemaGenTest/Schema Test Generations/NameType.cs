// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using System.Reflection;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;

/// <summary>
/// Structure to define a person's name, including prefixes, suffixes, and degrees.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://healthIT.gov/sdc")]
[DataContractAttribute(Name="NameType", Namespace="http://healthIT.gov/sdc")]
public partial class NameType : ExtensionBaseType
{
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _namePrefix;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _firstName;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _middleName;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _lastName;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _nameSuffix;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private BindingList<string_Stype> _degreeCert;
    
    [EditorBrowsable(EditorBrowsableState.Never)]
    private string_Stype _title;
    
    private static XmlSerializer serializer;
    
    private ObjectChangeTracker changeTrackerField;
    
    [XmlElementAttribute(Order=0)]
    [DataMemberAttribute(Order=0)]
    public virtual string_Stype NamePrefix
    {
        get
        {
            return _namePrefix;
        }
        set
        {
            if ((_namePrefix == value))
            {
                return;
            }
            if (((_namePrefix == null) 
                        || (_namePrefix.Equals(value) != true)))
            {
                _namePrefix = value;
                OnPropertyChanged("NamePrefix", value);
            }
        }
    }
    
    [XmlElementAttribute(IsNullable=true, Order=1)]
    [DataMemberAttribute(Order=1)]
    public virtual string_Stype FirstName
    {
        get
        {
            return _firstName;
        }
        set
        {
            if ((_firstName == value))
            {
                return;
            }
            if (((_firstName == null) 
                        || (_firstName.Equals(value) != true)))
            {
                _firstName = value;
                OnPropertyChanged("FirstName", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=2)]
    [DataMemberAttribute(Order=2)]
    public virtual string_Stype MiddleName
    {
        get
        {
            return _middleName;
        }
        set
        {
            if ((_middleName == value))
            {
                return;
            }
            if (((_middleName == null) 
                        || (_middleName.Equals(value) != true)))
            {
                _middleName = value;
                OnPropertyChanged("MiddleName", value);
            }
        }
    }
    
    [XmlElementAttribute(IsNullable=true, Order=3)]
    [DataMemberAttribute(Order=3)]
    public virtual string_Stype LastName
    {
        get
        {
            return _lastName;
        }
        set
        {
            if ((_lastName == value))
            {
                return;
            }
            if (((_lastName == null) 
                        || (_lastName.Equals(value) != true)))
            {
                _lastName = value;
                OnPropertyChanged("LastName", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=4)]
    [DataMemberAttribute(Order=4)]
    public virtual string_Stype NameSuffix
    {
        get
        {
            return _nameSuffix;
        }
        set
        {
            if ((_nameSuffix == value))
            {
                return;
            }
            if (((_nameSuffix == null) 
                        || (_nameSuffix.Equals(value) != true)))
            {
                _nameSuffix = value;
                OnPropertyChanged("NameSuffix", value);
            }
        }
    }
    
    /// <summary>
    /// Acronyms for degrees and certifications, e.g., MD, PhD, FACP (repeat element for each acronym)
    /// </summary>
    [XmlElementAttribute("DegreeCert", Order=5)]
    [DataMemberAttribute(Order=5)]
    public virtual BindingList<string_Stype> DegreeCert
    {
        get
        {
            return _degreeCert;
        }
        set
        {
            if ((_degreeCert == value))
            {
                return;
            }
            if (((_degreeCert == null) 
                        || (_degreeCert.Equals(value) != true)))
            {
                _degreeCert = value;
                OnPropertyChanged("DegreeCert", value);
            }
        }
    }
    
    [XmlElementAttribute(Order=6)]
    [DataMemberAttribute(Order=6)]
    public virtual string_Stype Title
    {
        get
        {
            return _title;
        }
        set
        {
            if ((_title == value))
            {
                return;
            }
            if (((_title == null) 
                        || (_title.Equals(value) != true)))
            {
                _title = value;
                OnPropertyChanged("Title", value);
            }
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(NameType));
            }
            return serializer;
        }
    }
    
    [XmlIgnore()]
    public ObjectChangeTracker ChangeTracker
    {
        get
        {
            if ((changeTrackerField == null))
            {
                changeTrackerField = new ObjectChangeTracker(this);
            }
            return changeTrackerField;
        }
    }
    
    /// <summary>
    /// Test whether NamePrefix should be serialized
    /// </summary>
    public virtual bool ShouldSerializeNamePrefix()
    {
        return (_namePrefix != null);
    }
    
    /// <summary>
    /// Test whether FirstName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFirstName()
    {
        return (_firstName != null);
    }
    
    /// <summary>
    /// Test whether MiddleName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeMiddleName()
    {
        return (_middleName != null);
    }
    
    /// <summary>
    /// Test whether LastName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeLastName()
    {
        return (_lastName != null);
    }
    
    /// <summary>
    /// Test whether NameSuffix should be serialized
    /// </summary>
    public virtual bool ShouldSerializeNameSuffix()
    {
        return (_nameSuffix != null);
    }
    
    /// <summary>
    /// Test whether Title should be serialized
    /// </summary>
    public virtual bool ShouldSerializeTitle()
    {
        return (_title != null);
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current NameType object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an NameType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output NameType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out NameType obj, out Exception exception)
    {
        exception = null;
        obj = default(NameType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out NameType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public new static NameType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((NameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static NameType Deserialize(Stream s)
    {
        return ((NameType)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current NameType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            FileInfo xmlFile = new FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an NameType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output NameType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out NameType obj, out Exception exception)
    {
        exception = null;
        obj = default(NameType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out NameType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public new static NameType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
    
    #region Clone method
    /// <summary>
    /// Create a clone of this NameType object
    /// </summary>
    public virtual NameType Clone()
    {
        return ((NameType)(MemberwiseClone()));
    }
    #endregion
}
}
#pragma warning restore
