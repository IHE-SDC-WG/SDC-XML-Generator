// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.1.0. www.xsd2code.com
//    Extensively modified rlm 2020_05_05
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using MsgPack.Serialization;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;

    #region Base entity class
    public static partial class SdcSerializerMsgPack<T> where T: ITopNode

    {

        private static MessagePackSerializer serializerMsgPack;

        private static MessagePackSerializer SerializerMsgPack
        {
            get
            {
                if ((serializerMsgPack == null))
                {
                    serializerMsgPack = MsgPack.Serialization.MessagePackSerializer.Get<T>();
                }
                return serializerMsgPack;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntityBase object to msgpack format
        /// </summary>
        /// <returns>string binary value</returns>
        public static byte[] SerializeMsgPack(T obj)
        {
            System.IO.MemoryStream byteStream = null;
            try
            {
                byteStream = new System.IO.MemoryStream();
                SerializerMsgPack.Pack(byteStream, obj);
                return byteStream.ToArray();
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EntityBase object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool DeserializeMsgPack(byte[] input, out T obj, out System.Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = DeserializeMsgPack(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool DeserializeMsgPack(byte[] input, out T obj)
        {
            System.Exception exception = null;
            return DeserializeMsgPack(input, out obj, out exception);
        }

        /// <summary>
        /// Deserializes msgpack to current EntityBase object
        /// </summary>
        public static T DeserializeMsgPack(byte[] input)
        {
            System.IO.MemoryStream byteStream = null;
            try
            {
                byteStream = new System.IO.MemoryStream(input);
                return ((T)(SerializerMsgPack.Unpack(byteStream)));
            }
            finally
            {
                if ((byteStream != null))
                {
                    byteStream.Dispose();
                }
            }
        }
        #endregion

        public static void SaveToFileMsgPack(string fileName, T obj)
        {
            System.IO.FileStream fileStream = null;
            try
            {
                byte[] msgPackBytes = SerializeMsgPack(obj);
                fileStream = new System.IO.FileStream(fileName, System.IO.FileMode.Create, System.IO.FileAccess.Write);
                fileStream.Write(msgPackBytes, 0, msgPackBytes.Length);
                fileStream.Close();
            }
            finally
            {
                if ((fileStream != null))
                {
                    fileStream.Dispose();
                }
            }
        }

        public static T LoadFromFileMsgPack(string fileName)
        {
            System.IO.FileStream file = null;
            byte[] buffer = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                buffer = new byte[file.Length];
                file.Read(buffer, 0, ((int)(file.Length)));
                return DeserializeMsgPack(buffer);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
            }
        }
    }
    #endregion
}
#pragma warning restore
