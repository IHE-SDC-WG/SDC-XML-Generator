// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class PackageItemType : ExtensionBaseType
{
    
    #region Private fields
    private bool _shouldSerializeformat;
    
    private bool _shouldSerializenewData;
    
    private bool _shouldSerializechangedData;
    
    private string _formManagerURI;
    
    private PackageItemTypeFormat _format;
    
    private string _packageID;
    
    private string _title;
    
    private string _baseURI;
    
    private string _filename;
    
    private string _basedOnURI;
    
    private string _lineage;
    
    private string _version;
    
    private string _fullURI;
    
    private string _prevVersionURI;
    
    private string _formInstanceURI;
    
    private string _formInstanceVersionURI;
    
    private string _formPreviousInstanceVersionURI;
    
    private bool _changedData;
    
    private bool _newData;
    #endregion
    
    /// <summary>
    /// NEW
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formManagerURI
    {
        get
        {
            return this._formManagerURI;
        }
        set
        {
            if ((this._formManagerURI == value))
            {
                return;
            }
            if (((this._formManagerURI == null) 
                        || (_formManagerURI.Equals(value) != true)))
            {
                this._formManagerURI = value;
                this.OnPropertyChanged("formManagerURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW
    /// enumeration
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual PackageItemTypeFormat format
    {
        get
        {
            return this._format;
        }
        set
        {
            if ((_format.Equals(value) != true))
            {
                this._format = value;
                this.OnPropertyChanged("format", value);
            }
            _shouldSerializeformat = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string packageID
    {
        get
        {
            return this._packageID;
        }
        set
        {
            if ((this._packageID == value))
            {
                return;
            }
            if (((this._packageID == null) 
                        || (_packageID.Equals(value) != true)))
            {
                this._packageID = value;
                this.OnPropertyChanged("packageID", value);
            }
        }
    }
    
    /// <summary>
    /// NEW
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string title
    {
        get
        {
            return this._title;
        }
        set
        {
            if ((this._title == value))
            {
                return;
            }
            if (((this._title == null) 
                        || (_title.Equals(value) != true)))
            {
                this._title = value;
                this.OnPropertyChanged("title", value);
            }
        }
    }
    
    /// <summary>
    /// If the ID does not use the default base URI (namespace), then the local baseURI goes here. Note that all IDs must be unique within a form, even if they do not have the same baseURI.
    /// 
    /// Ideally, the baseURI + ID should combine to form a *globally* unique identifier, that uniquely identifies an item in a particular form.  The same baseURI and ID may be reused in derived or versioned forms, as long as the context stays the same, and any affected data elements remain unchanged in context and semantics.  Following this approach is likely to simplify analytics based on form content.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string baseURI
    {
        get
        {
            return this._baseURI;
        }
        set
        {
            if ((this._baseURI == value))
            {
                return;
            }
            if (((this._baseURI == null) 
                        || (_baseURI.Equals(value) != true)))
            {
                this._baseURI = value;
                this.OnPropertyChanged("baseURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: filename to use when the current FormDesign instance is saved as a file.
    /// For forms containing responses, the filename may include the formInstanceVersionURI,
    /// but the naming convention may be use-case-specific.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string filename
    {
        get
        {
            return this._filename;
        }
        set
        {
            if ((this._filename == value))
            {
                return;
            }
            if (((this._filename == null) 
                        || (_filename.Equals(value) != true)))
            {
                this._filename = value;
                this.OnPropertyChanged("filename", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: URI used to identify the form that that this FormDesign is based upon.  In most cases, this should be a standard form that is modified and/or extended by the current FormDesign.
    /// 
    /// The current template reuses the basedOn IDs whenever the question/answer/semantic context is identical to the original.
    /// 
    /// 5/11/17:  Relying on data element mapping may be a better and more flexible approach than @basedOnURI. In this way, forms could compare data elements to determine if they contain semantic matches, and this is supported better with a more robust code map section.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string basedOnURI
    {
        get
        {
            return this._basedOnURI;
        }
        set
        {
            if ((this._basedOnURI == value))
            {
                return;
            }
            if (((this._basedOnURI == null) 
                        || (_basedOnURI.Equals(value) != true)))
            {
                this._basedOnURI = value;
                this.OnPropertyChanged("basedOnURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: A text identifier that is used to group multiple versions of a single form.  The lineage is constant for all versions of a single kind of form.
    /// 
    /// When appended to @baseURI, it can be used to retrieve all versions of one particular form.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string lineage
    {
        get
        {
            return this._lineage;
        }
        set
        {
            if ((this._lineage == value))
            {
                return;
            }
            if (((this._lineage == null) 
                        || (_lineage.Equals(value) != true)))
            {
                this._lineage = value;
                this.OnPropertyChanged("lineage", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: @version contains the version text for the current form.  It is designed to be used in conjuction with @baseURI and @lineage.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string version
    {
        get
        {
            return this._version;
        }
        set
        {
            if ((this._version == value))
            {
                return;
            }
            if (((this._version == null) 
                        || (_version.Equals(value) != true)))
            {
                this._version = value;
                this.OnPropertyChanged("version", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: The full URI that uniquely identifies the current form.   It is created by concatenating @baseURI + lineage + version.  Each of the componenets is separated by a single forward slash.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string fullURI
    {
        get
        {
            return this._fullURI;
        }
        set
        {
            if ((this._fullURI == value))
            {
                return;
            }
            if (((this._fullURI == null) 
                        || (_fullURI.Equals(value) != true)))
            {
                this._fullURI = value;
                this.OnPropertyChanged("fullURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: The full URI used to identify the form that is the immediate previous version of the current FormDesign
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string prevVersionURI
    {
        get
        {
            return this._prevVersionURI;
        }
        set
        {
            if ((this._prevVersionURI == value))
            {
                return;
            }
            if (((this._prevVersionURI == null) 
                        || (_prevVersionURI.Equals(value) != true)))
            {
                this._prevVersionURI = value;
                this.OnPropertyChanged("prevVersionURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a form.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI does not change for each edit session of a form instance.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formInstanceURI
    {
        get
        {
            return this._formInstanceURI;
        }
        set
        {
            if ((this._formInstanceURI == value))
            {
                return;
            }
            if (((this._formInstanceURI == null) 
                        || (_formInstanceURI.Equals(value) != true)))
            {
                this._formInstanceURI = value;
                this.OnPropertyChanged("formInstanceURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a form's saved responses.  It is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit/save session of a form instance.  It may be e.g., a new GUID, or a repeat of the formInstanceID followed by a version number.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formInstanceVersionURI
    {
        get
        {
            return this._formInstanceVersionURI;
        }
        set
        {
            if ((this._formInstanceVersionURI == value))
            {
                return;
            }
            if (((this._formInstanceVersionURI == null) 
                        || (_formInstanceVersionURI.Equals(value) != true)))
            {
                this._formInstanceVersionURI = value;
                this.OnPropertyChanged("formInstanceVersionURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify the immediate previous instance of a form containing responses.  This is the @formInstanceVersionURI that represents the instance of the form that the user opened up before beginning a new cycle of edit/save.  This attribute is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit session of a form instance.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string formPreviousInstanceVersionURI
    {
        get
        {
            return this._formPreviousInstanceVersionURI;
        }
        set
        {
            if ((this._formPreviousInstanceVersionURI == value))
            {
                return;
            }
            if (((this._formPreviousInstanceVersionURI == null) 
                        || (_formPreviousInstanceVersionURI.Equals(value) != true)))
            {
                this._formPreviousInstanceVersionURI = value;
                this.OnPropertyChanged("formPreviousInstanceVersionURI", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual bool changedData
    {
        get
        {
            return this._changedData;
        }
        set
        {
            if ((_changedData.Equals(value) != true))
            {
                this._changedData = value;
                this.OnPropertyChanged("changedData", value);
            }
            _shouldSerializechangedData = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual bool newData
    {
        get
        {
            return this._newData;
        }
        set
        {
            if ((_newData.Equals(value) != true))
            {
                this._newData = value;
                this.OnPropertyChanged("newData", value);
            }
            _shouldSerializenewData = true;
        }
    }
    
    /// <summary>
    /// Test whether changedData should be serialized
    /// </summary>
    public virtual bool ShouldSerializechangedData()
    {
        if (_shouldSerializechangedData)
        {
            return true;
        }
        return (_changedData != default(bool));
    }
    
    /// <summary>
    /// Test whether newData should be serialized
    /// </summary>
    public virtual bool ShouldSerializenewData()
    {
        if (_shouldSerializenewData)
        {
            return true;
        }
        return (_newData != default(bool));
    }
    
    /// <summary>
    /// Test whether format should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformat()
    {
        if (_shouldSerializeformat)
        {
            return true;
        }
        return (_format != default(PackageItemTypeFormat));
    }
    
    /// <summary>
    /// Test whether formManagerURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformManagerURI()
    {
        return !string.IsNullOrEmpty(formManagerURI);
    }
    
    /// <summary>
    /// Test whether packageID should be serialized
    /// </summary>
    public virtual bool ShouldSerializepackageID()
    {
        return !string.IsNullOrEmpty(packageID);
    }
    
    /// <summary>
    /// Test whether title should be serialized
    /// </summary>
    public virtual bool ShouldSerializetitle()
    {
        return !string.IsNullOrEmpty(title);
    }
    
    /// <summary>
    /// Test whether baseURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializebaseURI()
    {
        return !string.IsNullOrEmpty(baseURI);
    }
    
    /// <summary>
    /// Test whether filename should be serialized
    /// </summary>
    public virtual bool ShouldSerializefilename()
    {
        return !string.IsNullOrEmpty(filename);
    }
    
    /// <summary>
    /// Test whether basedOnURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializebasedOnURI()
    {
        return !string.IsNullOrEmpty(basedOnURI);
    }
    
    /// <summary>
    /// Test whether lineage should be serialized
    /// </summary>
    public virtual bool ShouldSerializelineage()
    {
        return !string.IsNullOrEmpty(lineage);
    }
    
    /// <summary>
    /// Test whether version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeversion()
    {
        return !string.IsNullOrEmpty(version);
    }
    
    /// <summary>
    /// Test whether fullURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializefullURI()
    {
        return !string.IsNullOrEmpty(fullURI);
    }
    
    /// <summary>
    /// Test whether prevVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeprevVersionURI()
    {
        return !string.IsNullOrEmpty(prevVersionURI);
    }
    
    /// <summary>
    /// Test whether formInstanceURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformInstanceURI()
    {
        return !string.IsNullOrEmpty(formInstanceURI);
    }
    
    /// <summary>
    /// Test whether formInstanceVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformInstanceVersionURI()
    {
        return !string.IsNullOrEmpty(formInstanceVersionURI);
    }
    
    /// <summary>
    /// Test whether formPreviousInstanceVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeformPreviousInstanceVersionURI()
    {
        return !string.IsNullOrEmpty(formPreviousInstanceVersionURI);
    }
}
}
#pragma warning restore
