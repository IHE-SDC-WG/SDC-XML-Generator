// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// A structure for recording street/mailing addresses.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class AddressType : ExtensionBaseType
{
    
    #region Private fields
    private string_Stype _addressType1;
    
    private List<string_Stype> _internalAddress;
    
    private List<string_Stype> _addressLine;
    
    private string_Stype _city;
    
    private string_Stype _jurisdiction;
    
    private string_Stype _state;
    
    private string_Stype _postalCode;
    
    private string_Stype _country;
    
    private string_Stype _usage;
    #endregion
    
    [System.Xml.Serialization.XmlElementAttribute("AddressType", Order=0)]
    public virtual string_Stype AddressType1
    {
        get
        {
            return this._addressType1;
        }
        set
        {
            if ((this._addressType1 == value))
            {
                return;
            }
            if (((this._addressType1 == null) 
                        || (_addressType1.Equals(value) != true)))
            {
                this._addressType1 = value;
                this.OnPropertyChanged("AddressType1", value);
            }
        }
    }
    
    /// <summary>
    /// Address instructions for directing mail within an organizations buildings or corporate
    /// infrastructure.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("InternalAddress", Order=1)]
    public virtual List<string_Stype> InternalAddress
    {
        get
        {
            return this._internalAddress;
        }
        set
        {
            if ((this._internalAddress == value))
            {
                return;
            }
            if (((this._internalAddress == null) 
                        || (_internalAddress.Equals(value) != true)))
            {
                this._internalAddress = value;
                this.OnPropertyChanged("InternalAddress", value);
            }
        }
    }
    
    /// <summary>
    /// Address instructions for directing mail to a street address.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("AddressLine", Order=2)]
    public virtual List<string_Stype> AddressLine
    {
        get
        {
            return this._addressLine;
        }
        set
        {
            if ((this._addressLine == value))
            {
                return;
            }
            if (((this._addressLine == null) 
                        || (_addressLine.Equals(value) != true)))
            {
                this._addressLine = value;
                this.OnPropertyChanged("AddressLine", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual string_Stype City
    {
        get
        {
            return this._city;
        }
        set
        {
            if ((this._city == value))
            {
                return;
            }
            if (((this._city == null) 
                        || (_city.Equals(value) != true)))
            {
                this._city = value;
                this.OnPropertyChanged("City", value);
            }
        }
    }
    
    /// <summary>
    /// Other optional locale identifier.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual string_Stype Jurisdiction
    {
        get
        {
            return this._jurisdiction;
        }
        set
        {
            if ((this._jurisdiction == value))
            {
                return;
            }
            if (((this._jurisdiction == null) 
                        || (_jurisdiction.Equals(value) != true)))
            {
                this._jurisdiction = value;
                this.OnPropertyChanged("Jurisdiction", value);
            }
        }
    }
    
    /// <summary>
    /// State, Province, etc.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=5)]
    public virtual string_Stype State
    {
        get
        {
            return this._state;
        }
        set
        {
            if ((this._state == value))
            {
                return;
            }
            if (((this._state == null) 
                        || (_state.Equals(value) != true)))
            {
                this._state = value;
                this.OnPropertyChanged("State", value);
            }
        }
    }
    
    /// <summary>
    /// Local postal code, e.g., zip code.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=6)]
    public virtual string_Stype PostalCode
    {
        get
        {
            return this._postalCode;
        }
        set
        {
            if ((this._postalCode == value))
            {
                return;
            }
            if (((this._postalCode == null) 
                        || (_postalCode.Equals(value) != true)))
            {
                this._postalCode = value;
                this.OnPropertyChanged("PostalCode", value);
            }
        }
    }
    
    /// <summary>
    /// **Need list of official country codes or text?
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=7)]
    public virtual string_Stype Country
    {
        get
        {
            return this._country;
        }
        set
        {
            if ((this._country == value))
            {
                return;
            }
            if (((this._country == null) 
                        || (_country.Equals(value) != true)))
            {
                this._country = value;
                this.OnPropertyChanged("Country", value);
            }
        }
    }
    
    /// <summary>
    /// When this address should be used
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=8)]
    public virtual string_Stype Usage
    {
        get
        {
            return this._usage;
        }
        set
        {
            if ((this._usage == value))
            {
                return;
            }
            if (((this._usage == null) 
                        || (_usage.Equals(value) != true)))
            {
                this._usage = value;
                this.OnPropertyChanged("Usage", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether InternalAddress should be serialized
    /// </summary>
    public virtual bool ShouldSerializeInternalAddress()
    {
        return InternalAddress != null && InternalAddress.Count > 0;
    }
    
    /// <summary>
    /// Test whether AddressLine should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAddressLine()
    {
        return AddressLine != null && AddressLine.Count > 0;
    }
    
    /// <summary>
    /// Test whether AddressType1 should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAddressType1()
    {
        return (_addressType1 != null);
    }
    
    /// <summary>
    /// Test whether City should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCity()
    {
        return (_city != null);
    }
    
    /// <summary>
    /// Test whether Jurisdiction should be serialized
    /// </summary>
    public virtual bool ShouldSerializeJurisdiction()
    {
        return (_jurisdiction != null);
    }
    
    /// <summary>
    /// Test whether State should be serialized
    /// </summary>
    public virtual bool ShouldSerializeState()
    {
        return (_state != null);
    }
    
    /// <summary>
    /// Test whether PostalCode should be serialized
    /// </summary>
    public virtual bool ShouldSerializePostalCode()
    {
        return (_postalCode != null);
    }
    
    /// <summary>
    /// Test whether Country should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCountry()
    {
        return (_country != null);
    }
    
    /// <summary>
    /// Test whether Usage should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUsage()
    {
        return (_usage != null);
    }
}
}
#pragma warning restore
