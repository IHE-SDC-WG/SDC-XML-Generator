// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Show a report preview, based on data in the current form. The
/// following parameter may be used: reportID: points to a report definition in SDC
/// format.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class ActPreviewReportType : ExtensionBaseType
{
    
    #region Private fields
    private string _reportID;
    
    private string _displayState;
    #endregion
    
    /// <summary>
    /// This ID represents the report to be
    /// displayed.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string reportID
    {
        get
        {
            return this._reportID;
        }
        set
        {
            if ((this._reportID == value))
            {
                return;
            }
            if (((this._reportID == null) 
                        || (_reportID.Equals(value) != true)))
            {
                this._reportID = value;
                this.OnPropertyChanged("reportID", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string displayState
    {
        get
        {
            return this._displayState;
        }
        set
        {
            if ((this._displayState == value))
            {
                return;
            }
            if (((this._displayState == null) 
                        || (_displayState.Equals(value) != true)))
            {
                this._displayState = value;
                this.OnPropertyChanged("displayState", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether reportID should be serialized
    /// </summary>
    public virtual bool ShouldSerializereportID()
    {
        return !string.IsNullOrEmpty(reportID);
    }
    
    /// <summary>
    /// Test whether displayState should be serialized
    /// </summary>
    public virtual bool ShouldSerializedisplayState()
    {
        return !string.IsNullOrEmpty(displayState);
    }
}
}
#pragma warning restore
