// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class RuleListItemMatchTargetsType : ExtensionBaseType
{
    
    #region Private fields
    private bool _shouldSerializeattributeToMatch;
    
    private string _matchListItems;
    
    private string _matchQuestions;
    
    private RuleListItemMatchTargetsTypeAttributeToMatch _attributeToMatch;
    #endregion
    
    /// <summary>
    /// RuleListItemMatchTargetsType class constructor
    /// </summary>
    public RuleListItemMatchTargetsType()
    {
        this._attributeToMatch = RuleListItemMatchTargetsTypeAttributeToMatch.associatedValue;
    }
    
    /// <summary>
    /// Takes the @name of one or more target ListItem elements.
    /// If the source value matches the match supplied attribute criteria, then
    /// the ListItem(s) should be selcted. The named Question and target
    /// ListItem must be activated (visible and enabled) in order for it to be
    /// selected. Read-only ListItems can be selected in the same manner.
    /// Multiple ListItem names may be specified, separated by
    /// spaces.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
    public virtual string MatchListItems
    {
        get
        {
            return this._matchListItems;
        }
        set
        {
            if ((this._matchListItems == value))
            {
                return;
            }
            if (((this._matchListItems == null) 
                        || (_matchListItems.Equals(value) != true)))
            {
                this._matchListItems = value;
                this.OnPropertyChanged("MatchListItems", value);
            }
        }
    }
    
    /// <summary>
    /// Takes the @name of a Question element with ListItems. If
    /// the source value matches the @associatedValue (or other
    /// @attributeToMatch) of one or more ListItems, then the ListItem(s) should
    /// be selcted. The named Question and target ListItem must be activated
    /// (visible and enabled) in order for it to be selected. Read-only
    /// Questions/ListItems can be selected in the same manner. Multiple Queston
    /// names may be specified, separated by spaces.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
    public virtual string MatchQuestions
    {
        get
        {
            return this._matchQuestions;
        }
        set
        {
            if ((this._matchQuestions == value))
            {
                return;
            }
            if (((this._matchQuestions == null) 
                        || (_matchQuestions.Equals(value) != true)))
            {
                this._matchQuestions = value;
                this.OnPropertyChanged("MatchQuestions", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(RuleListItemMatchTargetsTypeAttributeToMatch.associatedValue)]
    public virtual RuleListItemMatchTargetsTypeAttributeToMatch attributeToMatch
    {
        get
        {
            return this._attributeToMatch;
        }
        set
        {
            if ((_attributeToMatch.Equals(value) != true))
            {
                this._attributeToMatch = value;
                this.OnPropertyChanged("attributeToMatch", value);
            }
            _shouldSerializeattributeToMatch = true;
        }
    }
    
    /// <summary>
    /// Test whether attributeToMatch should be serialized
    /// </summary>
    public virtual bool ShouldSerializeattributeToMatch()
    {
        if (_shouldSerializeattributeToMatch)
        {
            return true;
        }
        return (_attributeToMatch != default(RuleListItemMatchTargetsTypeAttributeToMatch));
    }
    
    /// <summary>
    /// Test whether MatchListItems should be serialized
    /// </summary>
    public virtual bool ShouldSerializeMatchListItems()
    {
        return !string.IsNullOrEmpty(MatchListItems);
    }
    
    /// <summary>
    /// Test whether MatchQuestions should be serialized
    /// </summary>
    public virtual bool ShouldSerializeMatchQuestions()
    {
        return !string.IsNullOrEmpty(MatchQuestions);
    }
}
}
#pragma warning restore
