// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This Rule specifies a set of ListItems that cannot be selected
/// (@listItemNames) when a test ListItem (@testItemName) is selected. If any selection
/// occurs in @listItemNames when @testItemName is selected, the rule evaluate to true.
/// In all other cases, the rule evaluates to false. Multiple selections in
/// @listItemNames are acceptable as long as @testItemName is unselected, and in this
/// case, the rule evaluates to false. "Legal" (allowed) selections evaluate to false
/// "Illegal" selections evaluate to true Renamed from:
/// IllegalSelectionTest
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SelectionTestActionType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class PredSelectionTestType : PredSingleSelectionSetsType
{
    
    #region Private fields
    private string _testItemName;
    #endregion
    
    /// <summary>
    /// The ListItem that is being evaluated for the presence of
    /// disallowed selections (in @listItemNames). This attributes contains the
    /// @name of one ListItem.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
    public virtual string testItemName
    {
        get
        {
            return this._testItemName;
        }
        set
        {
            if ((this._testItemName == value))
            {
                return;
            }
            if (((this._testItemName == null) 
                        || (_testItemName.Equals(value) != true)))
            {
                this._testItemName = value;
                this.OnPropertyChanged("testItemName", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether testItemName should be serialized
    /// </summary>
    public virtual bool ShouldSerializetestItemName()
    {
        return !string.IsNullOrEmpty(testItemName);
    }
}
}
#pragma warning restore
