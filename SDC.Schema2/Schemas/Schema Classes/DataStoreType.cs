// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class DataStoreType : ExtensionBaseType
{
    
    #region Private fields
    private DataStoreTypeSecurityInfo _securityInfo;
    
    private string_Stype _dataStoreLocation;
    
    private string_Stype _databaseSoftware;
    
    private string_Stype _databaseName;
    
    private string_Stype _connectiontonString;
    
    private string_Stype _otherConnectionParameters;
    #endregion
    
    /// <summary>
    /// Logon credentials should be provided only if the connection is trusted, secure, and encrypted.  Whenever possible, this information should not be communicated in this manner, and another security model should be adopted.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=0)]
    public virtual DataStoreTypeSecurityInfo SecurityInfo
    {
        get
        {
            return this._securityInfo;
        }
        set
        {
            if ((this._securityInfo == value))
            {
                return;
            }
            if (((this._securityInfo == null) 
                        || (_securityInfo.Equals(value) != true)))
            {
                this._securityInfo = value;
                this.OnPropertyChanged("SecurityInfo", value);
            }
        }
    }
    
    /// <summary>
    /// The path to the database server.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=1)]
    public virtual string_Stype DataStoreLocation
    {
        get
        {
            return this._dataStoreLocation;
        }
        set
        {
            if ((this._dataStoreLocation == value))
            {
                return;
            }
            if (((this._dataStoreLocation == null) 
                        || (_dataStoreLocation.Equals(value) != true)))
            {
                this._dataStoreLocation = value;
                this.OnPropertyChanged("DataStoreLocation", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=2)]
    public virtual string_Stype DatabaseSoftware
    {
        get
        {
            return this._databaseSoftware;
        }
        set
        {
            if ((this._databaseSoftware == value))
            {
                return;
            }
            if (((this._databaseSoftware == null) 
                        || (_databaseSoftware.Equals(value) != true)))
            {
                this._databaseSoftware = value;
                this.OnPropertyChanged("DatabaseSoftware", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual string_Stype DatabaseName
    {
        get
        {
            return this._databaseName;
        }
        set
        {
            if ((this._databaseName == value))
            {
                return;
            }
            if (((this._databaseName == null) 
                        || (_databaseName.Equals(value) != true)))
            {
                this._databaseName = value;
                this.OnPropertyChanged("DatabaseName", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual string_Stype ConnectiontonString
    {
        get
        {
            return this._connectiontonString;
        }
        set
        {
            if ((this._connectiontonString == value))
            {
                return;
            }
            if (((this._connectiontonString == null) 
                        || (_connectiontonString.Equals(value) != true)))
            {
                this._connectiontonString = value;
                this.OnPropertyChanged("ConnectiontonString", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=5)]
    public virtual string_Stype OtherConnectionParameters
    {
        get
        {
            return this._otherConnectionParameters;
        }
        set
        {
            if ((this._otherConnectionParameters == value))
            {
                return;
            }
            if (((this._otherConnectionParameters == null) 
                        || (_otherConnectionParameters.Equals(value) != true)))
            {
                this._otherConnectionParameters = value;
                this.OnPropertyChanged("OtherConnectionParameters", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether SecurityInfo should be serialized
    /// </summary>
    public virtual bool ShouldSerializeSecurityInfo()
    {
        return (_securityInfo != null);
    }
    
    /// <summary>
    /// Test whether DataStoreLocation should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDataStoreLocation()
    {
        return (_dataStoreLocation != null);
    }
    
    /// <summary>
    /// Test whether DatabaseSoftware should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDatabaseSoftware()
    {
        return (_databaseSoftware != null);
    }
    
    /// <summary>
    /// Test whether DatabaseName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDatabaseName()
    {
        return (_databaseName != null);
    }
    
    /// <summary>
    /// Test whether ConnectiontonString should be serialized
    /// </summary>
    public virtual bool ShouldSerializeConnectiontonString()
    {
        return (_connectiontonString != null);
    }
    
    /// <summary>
    /// Test whether OtherConnectionParameters should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOtherConnectionParameters()
    {
        return (_otherConnectionParameters != null);
    }
}
}
#pragma warning restore
