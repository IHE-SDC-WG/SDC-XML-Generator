// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type represents any type of coding, terminology, classification, keyword, or local value system that may be applied to any displayable item in a
/// FormDesign template.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class CodingType : ExtensionBaseType
{
    
    #region Private fields
    private string_Stype _code;
    
    private DataTypes_SType _typedValue;
    
    private RichTextType _codeText;
    
    private CodeMatchType _codeMatch;
    
    private CodeSystemType _codeSystem;
    
    private anyURI_Stype _codeURI;
    
    private UnitsType _units;
    #endregion
    
    /// <summary>
    /// A standard code, or a local value from a custom coding system, that can be used to consistently identify, or provide a
    /// standard value for, the coded item.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
    public virtual string_Stype Code
    {
        get
        {
            return this._code;
        }
        set
        {
            if ((this._code == value))
            {
                return;
            }
            if (((this._code == null) 
                        || (_code.Equals(value) != true)))
            {
                this._code = value;
                this.OnPropertyChanged("Code", value);
            }
        }
    }
    
    /// <summary>
    /// Data type enumeration derived from W3C XML Schema. If
    /// the code is derived from a local value system (e.g., numbered answer
    /// choices such as clock positions, tumor grades, or clinical scoring
    /// systems), then the data type of the local value may be specified
    /// here. This may be important if the code value will need to be
    /// manipulated mathematically.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=1)]
    public virtual DataTypes_SType TypedValue
    {
        get
        {
            return this._typedValue;
        }
        set
        {
            if ((this._typedValue == value))
            {
                return;
            }
            if (((this._typedValue == null) 
                        || (_typedValue.Equals(value) != true)))
            {
                this._typedValue = value;
                this.OnPropertyChanged("TypedValue", value);
            }
        }
    }
    
    /// <summary>
    /// The human readable text that accompanies the assigned code and represents the code's precise meaning (semantics) or
    /// usage.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=2)]
    public virtual RichTextType CodeText
    {
        get
        {
            return this._codeText;
        }
        set
        {
            if ((this._codeText == value))
            {
                return;
            }
            if (((this._codeText == null) 
                        || (_codeText.Equals(value) != true)))
            {
                this._codeText = value;
                this.OnPropertyChanged("CodeText", value);
            }
        }
    }
    
    /// <summary>
    /// Degree of match between the mapped item and the assigned code - @codeMatchType holds an entry from an enumerated
    /// list of match types.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual CodeMatchType CodeMatch
    {
        get
        {
            return this._codeMatch;
        }
        set
        {
            if ((this._codeMatch == value))
            {
                return;
            }
            if (((this._codeMatch == null) 
                        || (_codeMatch.Equals(value) != true)))
            {
                this._codeMatch = value;
                this.OnPropertyChanged("CodeMatch", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual CodeSystemType CodeSystem
    {
        get
        {
            return this._codeSystem;
        }
        set
        {
            if ((this._codeSystem == value))
            {
                return;
            }
            if (((this._codeSystem == null) 
                        || (_codeSystem.Equals(value) != true)))
            {
                this._codeSystem = value;
                this.OnPropertyChanged("CodeSystem", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Web resource that provides information about the code
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=5)]
    public virtual anyURI_Stype CodeURI
    {
        get
        {
            return this._codeURI;
        }
        set
        {
            if ((this._codeURI == value))
            {
                return;
            }
            if (((this._codeURI == null) 
                        || (_codeURI.Equals(value) != true)))
            {
                this._codeURI = value;
                this.OnPropertyChanged("CodeURI", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=6)]
    public virtual UnitsType Units
    {
        get
        {
            return this._units;
        }
        set
        {
            if ((this._units == value))
            {
                return;
            }
            if (((this._units == null) 
                        || (_units.Equals(value) != true)))
            {
                this._units = value;
                this.OnPropertyChanged("Units", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether Code should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCode()
    {
        return (_code != null);
    }
    
    /// <summary>
    /// Test whether TypedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializeTypedValue()
    {
        return (_typedValue != null);
    }
    
    /// <summary>
    /// Test whether CodeText should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeText()
    {
        return (_codeText != null);
    }
    
    /// <summary>
    /// Test whether CodeMatch should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeMatch()
    {
        return (_codeMatch != null);
    }
    
    /// <summary>
    /// Test whether CodeSystem should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeSystem()
    {
        return (_codeSystem != null);
    }
    
    /// <summary>
    /// Test whether CodeURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodeURI()
    {
        return (_codeURI != null);
    }
    
    /// <summary>
    /// Test whether Units should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUnits()
    {
        return (_units != null);
    }
}
}
#pragma warning restore
