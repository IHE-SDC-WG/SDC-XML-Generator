// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Information about a file, usually thought of as a binary byte stream
/// stored on disk. A FileType can also represent a "virtual" file, such as an XML
/// module in a larger XML document. Such a virtual file could theoretically be stored
/// as a byte stream, as an independant file on disk or as a database record or set of
/// records, even if this byte stream is never actually persisted as an independant disk
/// file.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class FileType : ExtensionBaseType
{
    
    #region Private fields
    private string_Stype _fileID;
    
    private anyURI_Stype _fileURI;
    
    private string_Stype _displayName;
    
    private string_Stype _title;
    
    private VersionType _version;
    
    private string_Stype _fileName;
    
    private string_Stype _fileExtension;
    
    private string_Stype _fileClass;
    
    private positiveInteger_Stype _fileSizeKB;
    
    private List<string_Stype> _description;
    
    private string_Stype _copyright;
    
    private string_Stype _termsofUse;
    
    private FileUsageType _usage;
    
    private FileDatesType _dates;
    
    private ContactsType _contacts;
    
    private List<ApprovalType> _approval;
    
    private FileHashType _fileHash;
    
    private List<LanguageType> _language;
    
    private AssociatedFilesType _associatedFiles;
    
    private ProvenanceType _provenance;
    
    private List<SubmissionRuleType> _defaultSubmissionRule;
    
    private List<ComplianceRuleType> _defaultComplianceRule;
    #endregion
    
    /// <summary>
    /// Internal/local File ID, not necessarily in the format
    /// of the FileURI used for all SDC FormDesign items.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=0)]
    public virtual string_Stype FileID
    {
        get
        {
            return this._fileID;
        }
        set
        {
            if ((this._fileID == value))
            {
                return;
            }
            if (((this._fileID == null) 
                        || (_fileID.Equals(value) != true)))
            {
                this._fileID = value;
                this.OnPropertyChanged("FileID", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=1)]
    public virtual anyURI_Stype FileURI
    {
        get
        {
            return this._fileURI;
        }
        set
        {
            if ((this._fileURI == value))
            {
                return;
            }
            if (((this._fileURI == null) 
                        || (_fileURI.Equals(value) != true)))
            {
                this._fileURI = value;
                this.OnPropertyChanged("FileURI", value);
            }
        }
    }
    
    /// <summary>
    /// Text to be displayed that encapulates the file
    /// contents. This may be the same as the internal Title of the
    /// file.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=2)]
    public virtual string_Stype DisplayName
    {
        get
        {
            return this._displayName;
        }
        set
        {
            if ((this._displayName == value))
            {
                return;
            }
            if (((this._displayName == null) 
                        || (_displayName.Equals(value) != true)))
            {
                this._displayName = value;
                this.OnPropertyChanged("DisplayName", value);
            }
        }
    }
    
    /// <summary>
    /// Official title of the file.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual string_Stype Title
    {
        get
        {
            return this._title;
        }
        set
        {
            if ((this._title == value))
            {
                return;
            }
            if (((this._title == null) 
                        || (_title.Equals(value) != true)))
            {
                this._title = value;
                this.OnPropertyChanged("Title", value);
            }
        }
    }
    
    /// <summary>
    /// File version
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual VersionType Version
    {
        get
        {
            return this._version;
        }
        set
        {
            if ((this._version == value))
            {
                return;
            }
            if (((this._version == null) 
                        || (_version.Equals(value) != true)))
            {
                this._version = value;
                this.OnPropertyChanged("Version", value);
            }
        }
    }
    
    /// <summary>
    /// The name of the file as saved on disk or other persistant storage.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=5)]
    public virtual string_Stype FileName
    {
        get
        {
            return this._fileName;
        }
        set
        {
            if ((this._fileName == value))
            {
                return;
            }
            if (((this._fileName == null) 
                        || (_fileName.Equals(value) != true)))
            {
                this._fileName = value;
                this.OnPropertyChanged("FileName", value);
            }
        }
    }
    
    /// <summary>
    /// The file type extension that describes the file's
    /// internal format. This is usually the 3-4 character text that appears
    /// after the last period in the file name, e.g., txt, docx,
    /// etc.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=6)]
    public virtual string_Stype FileExtension
    {
        get
        {
            return this._fileExtension;
        }
        set
        {
            if ((this._fileExtension == value))
            {
                return;
            }
            if (((this._fileExtension == null) 
                        || (_fileExtension.Equals(value) != true)))
            {
                this._fileExtension = value;
                this.OnPropertyChanged("FileExtension", value);
            }
        }
    }
    
    /// <summary>
    /// A short description of the class of file, such as "FormDesign XML"
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=7)]
    public virtual string_Stype FileClass
    {
        get
        {
            return this._fileClass;
        }
        set
        {
            if ((this._fileClass == value))
            {
                return;
            }
            if (((this._fileClass == null) 
                        || (_fileClass.Equals(value) != true)))
            {
                this._fileClass = value;
                this.OnPropertyChanged("FileClass", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=8)]
    public virtual positiveInteger_Stype FileSizeKB
    {
        get
        {
            return this._fileSizeKB;
        }
        set
        {
            if ((this._fileSizeKB == value))
            {
                return;
            }
            if (((this._fileSizeKB == null) 
                        || (_fileSizeKB.Equals(value) != true)))
            {
                this._fileSizeKB = value;
                this.OnPropertyChanged("FileSizeKB", value);
            }
        }
    }
    
    /// <summary>
    /// Any additional information about the template or file. The type of information should be specified in the @type
    /// attribute.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("Description", Order=9)]
    public virtual List<string_Stype> Description
    {
        get
        {
            return this._description;
        }
        set
        {
            if ((this._description == value))
            {
                return;
            }
            if (((this._description == null) 
                        || (_description.Equals(value) != true)))
            {
                this._description = value;
                this.OnPropertyChanged("Description", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=10)]
    public virtual string_Stype Copyright
    {
        get
        {
            return this._copyright;
        }
        set
        {
            if ((this._copyright == value))
            {
                return;
            }
            if (((this._copyright == null) 
                        || (_copyright.Equals(value) != true)))
            {
                this._copyright = value;
                this.OnPropertyChanged("Copyright", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=11)]
    public virtual string_Stype TermsofUse
    {
        get
        {
            return this._termsofUse;
        }
        set
        {
            if ((this._termsofUse == value))
            {
                return;
            }
            if (((this._termsofUse == null) 
                        || (_termsofUse.Equals(value) != true)))
            {
                this._termsofUse = value;
                this.OnPropertyChanged("TermsofUse", value);
            }
        }
    }
    
    /// <summary>
    /// Guidance for when this file should be used, and when it should not be used.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=12)]
    public virtual FileUsageType Usage
    {
        get
        {
            return this._usage;
        }
        set
        {
            if ((this._usage == value))
            {
                return;
            }
            if (((this._usage == null) 
                        || (_usage.Equals(value) != true)))
            {
                this._usage = value;
                this.OnPropertyChanged("Usage", value);
            }
        }
    }
    
    /// <summary>
    /// Various dates associated with the file release, versioning and usage.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=13)]
    public virtual FileDatesType Dates
    {
        get
        {
            return this._dates;
        }
        set
        {
            if ((this._dates == value))
            {
                return;
            }
            if (((this._dates == null) 
                        || (_dates.Equals(value) != true)))
            {
                this._dates = value;
                this.OnPropertyChanged("Dates", value);
            }
        }
    }
    
    /// <summary>
    /// People and Organizations associated with the file.
    /// Specify the type of Contact in the @type attribute. Examples of
    /// @type include Curator, Author, and Authority.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=14)]
    public virtual ContactsType Contacts
    {
        get
        {
            return this._contacts;
        }
        set
        {
            if ((this._contacts == value))
            {
                return;
            }
            if (((this._contacts == null) 
                        || (_contacts.Equals(value) != true)))
            {
                this._contacts = value;
                this.OnPropertyChanged("Contacts", value);
            }
        }
    }
    
    /// <summary>
    /// Documentation of review and acceptance of the file for production usage.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("Approval", Order=15)]
    public virtual List<ApprovalType> Approval
    {
        get
        {
            return this._approval;
        }
        set
        {
            if ((this._approval == value))
            {
                return;
            }
            if (((this._approval == null) 
                        || (_approval.Equals(value) != true)))
            {
                this._approval = value;
                this.OnPropertyChanged("Approval", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=16)]
    public virtual FileHashType FileHash
    {
        get
        {
            return this._fileHash;
        }
        set
        {
            if ((this._fileHash == value))
            {
                return;
            }
            if (((this._fileHash == null) 
                        || (_fileHash.Equals(value) != true)))
            {
                this._fileHash = value;
                this.OnPropertyChanged("FileHash", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("Language", Order=17)]
    public virtual List<LanguageType> Language
    {
        get
        {
            return this._language;
        }
        set
        {
            if ((this._language == value))
            {
                return;
            }
            if (((this._language == null) 
                        || (_language.Equals(value) != true)))
            {
                this._language = value;
                this.OnPropertyChanged("Language", value);
            }
        }
    }
    
    /// <summary>
    /// Link to any associated files, such as schemas, reference documents, manuals, etc.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=18)]
    public virtual AssociatedFilesType AssociatedFiles
    {
        get
        {
            return this._associatedFiles;
        }
        set
        {
            if ((this._associatedFiles == value))
            {
                return;
            }
            if (((this._associatedFiles == null) 
                        || (_associatedFiles.Equals(value) != true)))
            {
                this._associatedFiles = value;
                this.OnPropertyChanged("AssociatedFiles", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=19)]
    public virtual ProvenanceType Provenance
    {
        get
        {
            return this._provenance;
        }
        set
        {
            if ((this._provenance == value))
            {
                return;
            }
            if (((this._provenance == null) 
                        || (_provenance.Equals(value) != true)))
            {
                this._provenance = value;
                this.OnPropertyChanged("Provenance", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DefaultSubmissionRule", Order=20)]
    public virtual List<SubmissionRuleType> DefaultSubmissionRule
    {
        get
        {
            return this._defaultSubmissionRule;
        }
        set
        {
            if ((this._defaultSubmissionRule == value))
            {
                return;
            }
            if (((this._defaultSubmissionRule == null) 
                        || (_defaultSubmissionRule.Equals(value) != true)))
            {
                this._defaultSubmissionRule = value;
                this.OnPropertyChanged("DefaultSubmissionRule", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("DefaultComplianceRule", Order=21)]
    public virtual List<ComplianceRuleType> DefaultComplianceRule
    {
        get
        {
            return this._defaultComplianceRule;
        }
        set
        {
            if ((this._defaultComplianceRule == value))
            {
                return;
            }
            if (((this._defaultComplianceRule == null) 
                        || (_defaultComplianceRule.Equals(value) != true)))
            {
                this._defaultComplianceRule = value;
                this.OnPropertyChanged("DefaultComplianceRule", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether Description should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDescription()
    {
        return Description != null && Description.Count > 0;
    }
    
    /// <summary>
    /// Test whether Approval should be serialized
    /// </summary>
    public virtual bool ShouldSerializeApproval()
    {
        return Approval != null && Approval.Count > 0;
    }
    
    /// <summary>
    /// Test whether Language should be serialized
    /// </summary>
    public virtual bool ShouldSerializeLanguage()
    {
        return Language != null && Language.Count > 0;
    }
    
    /// <summary>
    /// Test whether DefaultSubmissionRule should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDefaultSubmissionRule()
    {
        return DefaultSubmissionRule != null && DefaultSubmissionRule.Count > 0;
    }
    
    /// <summary>
    /// Test whether DefaultComplianceRule should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDefaultComplianceRule()
    {
        return DefaultComplianceRule != null && DefaultComplianceRule.Count > 0;
    }
    
    /// <summary>
    /// Test whether FileID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileID()
    {
        return (_fileID != null);
    }
    
    /// <summary>
    /// Test whether FileURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileURI()
    {
        return (_fileURI != null);
    }
    
    /// <summary>
    /// Test whether DisplayName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDisplayName()
    {
        return (_displayName != null);
    }
    
    /// <summary>
    /// Test whether Title should be serialized
    /// </summary>
    public virtual bool ShouldSerializeTitle()
    {
        return (_title != null);
    }
    
    /// <summary>
    /// Test whether Version should be serialized
    /// </summary>
    public virtual bool ShouldSerializeVersion()
    {
        return (_version != null);
    }
    
    /// <summary>
    /// Test whether FileName should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileName()
    {
        return (_fileName != null);
    }
    
    /// <summary>
    /// Test whether FileExtension should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileExtension()
    {
        return (_fileExtension != null);
    }
    
    /// <summary>
    /// Test whether FileClass should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileClass()
    {
        return (_fileClass != null);
    }
    
    /// <summary>
    /// Test whether FileSizeKB should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileSizeKB()
    {
        return (_fileSizeKB != null);
    }
    
    /// <summary>
    /// Test whether Copyright should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCopyright()
    {
        return (_copyright != null);
    }
    
    /// <summary>
    /// Test whether TermsofUse should be serialized
    /// </summary>
    public virtual bool ShouldSerializeTermsofUse()
    {
        return (_termsofUse != null);
    }
    
    /// <summary>
    /// Test whether Usage should be serialized
    /// </summary>
    public virtual bool ShouldSerializeUsage()
    {
        return (_usage != null);
    }
    
    /// <summary>
    /// Test whether Dates should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDates()
    {
        return (_dates != null);
    }
    
    /// <summary>
    /// Test whether Contacts should be serialized
    /// </summary>
    public virtual bool ShouldSerializeContacts()
    {
        return (_contacts != null);
    }
    
    /// <summary>
    /// Test whether FileHash should be serialized
    /// </summary>
    public virtual bool ShouldSerializeFileHash()
    {
        return (_fileHash != null);
    }
    
    /// <summary>
    /// Test whether AssociatedFiles should be serialized
    /// </summary>
    public virtual bool ShouldSerializeAssociatedFiles()
    {
        return (_associatedFiles != null);
    }
    
    /// <summary>
    /// Test whether Provenance should be serialized
    /// </summary>
    public virtual bool ShouldSerializeProvenance()
    {
        return (_provenance != null);
    }
}
}
#pragma warning restore
