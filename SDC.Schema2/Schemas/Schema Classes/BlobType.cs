// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Standard structure for including Binary Large Objects (Blobs) in XML
/// templates. Blobs can handle any type of binary media, such as images, audio, video,
/// and data streams of any specified format (such as a MIME type).
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class BlobType : ExtensionBaseType
{
    
    #region Private fields
    private List<RichTextType> _description;
    
    private HashType _hash;
    
    private BaseType _item;
    
    private string _mediaType;
    
    private string _fileExtension;
    #endregion
    
    [System.Xml.Serialization.XmlElementAttribute("Description", Order=0)]
    public virtual List<RichTextType> Description
    {
        get
        {
            return this._description;
        }
        set
        {
            if ((this._description == value))
            {
                return;
            }
            if (((this._description == null) 
                        || (_description.Equals(value) != true)))
            {
                this._description = value;
                this.OnPropertyChanged("Description", value);
            }
        }
    }
    
    /// <summary>
    /// Binary hash of the blob data
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=1)]
    public virtual HashType Hash
    {
        get
        {
            return this._hash;
        }
        set
        {
            if ((this._hash == value))
            {
                return;
            }
            if (((this._hash == null) 
                        || (_hash.Equals(value) != true)))
            {
                this._hash = value;
                this.OnPropertyChanged("Hash", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("BinaryMediaBase64", typeof(base64Binary_Stype), Order=2)]
    [System.Xml.Serialization.XmlElementAttribute("BlobURI", typeof(anyURI_Stype), Order=2)]
    public virtual BaseType Item
    {
        get
        {
            return this._item;
        }
        set
        {
            if ((this._item == value))
            {
                return;
            }
            if (((this._item == null) 
                        || (_item.Equals(value) != true)))
            {
                this._item = value;
                this.OnPropertyChanged("Item", value);
            }
        }
    }
    
    /// <summary>
    /// TBD: Must be a valid MIME type - needs enumeration
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string mediaType
    {
        get
        {
            return this._mediaType;
        }
        set
        {
            if ((this._mediaType == value))
            {
                return;
            }
            if (((this._mediaType == null) 
                        || (_mediaType.Equals(value) != true)))
            {
                this._mediaType = value;
                this.OnPropertyChanged("mediaType", value);
            }
        }
    }
    
    /// <summary>
    /// Use a common file extension (e.g., docx) if there is no @MIME_Type available
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string fileExtension
    {
        get
        {
            return this._fileExtension;
        }
        set
        {
            if ((this._fileExtension == value))
            {
                return;
            }
            if (((this._fileExtension == null) 
                        || (_fileExtension.Equals(value) != true)))
            {
                this._fileExtension = value;
                this.OnPropertyChanged("fileExtension", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether Description should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDescription()
    {
        return Description != null && Description.Count > 0;
    }
    
    /// <summary>
    /// Test whether Hash should be serialized
    /// </summary>
    public virtual bool ShouldSerializeHash()
    {
        return (_hash != null);
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (_item != null);
    }
    
    /// <summary>
    /// Test whether mediaType should be serialized
    /// </summary>
    public virtual bool ShouldSerializemediaType()
    {
        return !string.IsNullOrEmpty(mediaType);
    }
    
    /// <summary>
    /// Test whether fileExtension should be serialized
    /// </summary>
    public virtual bool ShouldSerializefileExtension()
    {
        return !string.IsNullOrEmpty(fileExtension);
    }
}
}
#pragma warning restore
