// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class dateTimeStamp_DEtype : dateTimeStamp_Stype
{
    
    #region Private fields
    private bool _shouldSerializeminInclusive;
    
    private bool _shouldSerializemaxInclusive;
    
    private bool _shouldSerializeminExclusive;
    
    private bool _shouldSerializemaxExclusive;
    
    private System.DateTime _maxExclusive;
    
    private System.DateTime _minExclusive;
    
    private System.DateTime _maxInclusive;
    
    private System.DateTime _minInclusive;
    
    private string _mask;
    #endregion
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual System.DateTime maxExclusive
    {
        get
        {
            return this._maxExclusive;
        }
        set
        {
            if ((_maxExclusive.Equals(value) != true))
            {
                this._maxExclusive = value;
                this.OnPropertyChanged("maxExclusive", value);
            }
            _shouldSerializemaxExclusive = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual System.DateTime minExclusive
    {
        get
        {
            return this._minExclusive;
        }
        set
        {
            if ((_minExclusive.Equals(value) != true))
            {
                this._minExclusive = value;
                this.OnPropertyChanged("minExclusive", value);
            }
            _shouldSerializeminExclusive = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual System.DateTime maxInclusive
    {
        get
        {
            return this._maxInclusive;
        }
        set
        {
            if ((_maxInclusive.Equals(value) != true))
            {
                this._maxInclusive = value;
                this.OnPropertyChanged("maxInclusive", value);
            }
            _shouldSerializemaxInclusive = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual System.DateTime minInclusive
    {
        get
        {
            return this._minInclusive;
        }
        set
        {
            if ((_minInclusive.Equals(value) != true))
            {
                this._minInclusive = value;
                this.OnPropertyChanged("minInclusive", value);
            }
            _shouldSerializeminInclusive = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string mask
    {
        get
        {
            return this._mask;
        }
        set
        {
            if ((this._mask == value))
            {
                return;
            }
            if (((this._mask == null) 
                        || (_mask.Equals(value) != true)))
            {
                this._mask = value;
                this.OnPropertyChanged("mask", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether maxExclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxExclusive()
    {
        if (_shouldSerializemaxExclusive)
        {
            return true;
        }
        return (_maxExclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether minExclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializeminExclusive()
    {
        if (_shouldSerializeminExclusive)
        {
            return true;
        }
        return (_minExclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether maxInclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxInclusive()
    {
        if (_shouldSerializemaxInclusive)
        {
            return true;
        }
        return (_maxInclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether minInclusive should be serialized
    /// </summary>
    public virtual bool ShouldSerializeminInclusive()
    {
        if (_shouldSerializeminInclusive)
        {
            return true;
        }
        return (_minInclusive != default(System.DateTime));
    }
    
    /// <summary>
    /// Test whether mask should be serialized
    /// </summary>
    public virtual bool ShouldSerializemask()
    {
        return !string.IsNullOrEmpty(mask);
    }
}
}
#pragma warning restore
