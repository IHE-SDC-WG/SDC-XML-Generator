// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// Programming code or pseudocode that describes a calculation.  THe code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActSetAttrValueScriptType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class ScriptCodeAnyType : ScriptCodeBaseType
{
    
    #region Private fields
    private string _dataType;
    #endregion
    
    ///// <summary>
    ///// ScriptCodeAnyType class constructor
    ///// </summary>
    //public ScriptCodeAnyType()
    //{
    //    this._dataType = "string";
    //}
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute("string")]
    public virtual string dataType
    {
        get
        {
            return this._dataType;
        }
        set
        {
            if ((this._dataType == value))
            {
                return;
            }
            if (((this._dataType == null) 
                        || (_dataType.Equals(value) != true)))
            {
                this._dataType = value;
                this.OnPropertyChanged("dataType", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether dataType should be serialized
    /// </summary>
    public virtual bool ShouldSerializedataType()
    {
        return !string.IsNullOrEmpty(dataType);
    }
}
}
#pragma warning restore
