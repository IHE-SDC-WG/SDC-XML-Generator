// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This base element is the foundation for ListItems, but does not
/// include the MainItems sub-group under each ListItem.
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public abstract partial class ListItemBaseType : DisplayedType
{
    
    #region Private fields
    private bool _shouldSerializeomitWhenSelected;
    
    private bool _shouldSerializeselectionDeselectsSiblings;
    
    private bool _shouldSerializeselectionDisablesChildren;
    
    private bool _shouldSerializeselected;
    
    private ListItemResponseFieldType _listItemResponseField;
    
    private List<EventType> _onSelect;
    
    private List<EventType> _onDeselect;
    
    private PredGuardType _selectIf;
    
    private PredGuardType _deselectIf;
    
    private bool _selected;
    
    private bool _selectionDisablesChildren;
    
    private string _selectionActivatesItems;
    
    private string _selectionSelectsListItems;
    
    private bool _selectionDeselectsSiblings;
    
    private bool _omitWhenSelected;
    
    private string _repeat;
    
    private string _instanceGUID;
    
    private string _parentGUID;
    
    private string _associatedValue;
    
    private string _associatedValueType;
    #endregion
    
    ///// <summary>
    ///// ListItemBaseType class constructor
    ///// </summary>
    //public ListItemBaseType()
    //{
    //    this._selected = false;
    //    this._selectionDisablesChildren = false;
    //    this._selectionDeselectsSiblings = false;
    //    this._omitWhenSelected = false;
    //    this._repeat = "0";
    //}
    
    /// <summary>
    /// A place to enter values (of any data type) that are
    /// directly associated with, and attached to, a selected answer
    /// choice.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=0)]
    public virtual ListItemResponseFieldType ListItemResponseField
    {
        get
        {
            return this._listItemResponseField;
        }
        set
        {
            if ((this._listItemResponseField == value))
            {
                return;
            }
            if (((this._listItemResponseField == null) 
                        || (_listItemResponseField.Equals(value) != true)))
            {
                this._listItemResponseField = value;
                this.OnPropertyChanged("ListItemResponseField", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("OnSelect", Order=1)]
    public virtual List<EventType> OnSelect
    {
        get
        {
            return this._onSelect;
        }
        set
        {
            if ((this._onSelect == value))
            {
                return;
            }
            if (((this._onSelect == null) 
                        || (_onSelect.Equals(value) != true)))
            {
                this._onSelect = value;
                this.OnPropertyChanged("OnSelect", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("OnDeselect", Order=2)]
    public virtual List<EventType> OnDeselect
    {
        get
        {
            return this._onDeselect;
        }
        set
        {
            if ((this._onDeselect == value))
            {
                return;
            }
            if (((this._onDeselect == null) 
                        || (_onDeselect.Equals(value) != true)))
            {
                this._onDeselect = value;
                this.OnPropertyChanged("OnDeselect", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=3)]
    public virtual PredGuardType SelectIf
    {
        get
        {
            return this._selectIf;
        }
        set
        {
            if ((this._selectIf == value))
            {
                return;
            }
            if (((this._selectIf == null) 
                        || (_selectIf.Equals(value) != true)))
            {
                this._selectIf = value;
                this.OnPropertyChanged("SelectIf", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Order=4)]
    public virtual PredGuardType DeselectIf
    {
        get
        {
            return this._deselectIf;
        }
        set
        {
            if ((this._deselectIf == value))
            {
                return;
            }
            if (((this._deselectIf == null) 
                        || (_deselectIf.Equals(value) != true)))
            {
                this._deselectIf = value;
                this.OnPropertyChanged("DeselectIf", value);
            }
        }
    }
    
    /// <summary>
    /// Represents the default value of the ListItem in the
    /// FormDesign template, or the user's response in selecting one or more
    /// ListItems. If @multiSelect='false' on ListField then only one item may
    /// be selected.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(false)]
    public virtual bool selected
    {
        get
        {
            return this._selected;
        }
        set
        {
            if ((_selected.Equals(value) != true))
            {
                this._selected = value;
                this.OnPropertyChanged("selected", value);
            }
            _shouldSerializeselected = true;
        }
    }
    
    /// <summary>
    /// If set to true, then selecting this ListItem must
    /// deactivate all descendant parts of the form, and ignore any user-entered
    /// values in the deactivated part. Deselecting the ListItem should
    /// reactivate the descendant items in their state at the time the items
    /// were deactivated. If items are disabled, then any data stored in the
    /// disabled questions should be removed.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(false)]
    public virtual bool selectionDisablesChildren
    {
        get
        {
            return this._selectionDisablesChildren;
        }
        set
        {
            if ((_selectionDisablesChildren.Equals(value) != true))
            {
                this._selectionDisablesChildren = value;
                this.OnPropertyChanged("selectionDisablesChildren", value);
            }
            _shouldSerializeselectionDisablesChildren = true;
        }
    }
    
    /// <summary>
    /// NEW Selecting the current ListItem will enable the named
    /// items in this attribute's content. Prefixing any named with a hyphen (-)
    /// will reverse the above behaviour (i.e., the named items will be
    /// disabled). Unselecting the ListItem will reverse this behaviour.
    /// Prefixing the name with a tilde (~) will supress this reversal behavior.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
    public virtual string selectionActivatesItems
    {
        get
        {
            return this._selectionActivatesItems;
        }
        set
        {
            if ((this._selectionActivatesItems == value))
            {
                return;
            }
            if (((this._selectionActivatesItems == null) 
                        || (_selectionActivatesItems.Equals(value) != true)))
            {
                this._selectionActivatesItems = value;
                this.OnPropertyChanged("selectionActivatesItems", value);
            }
        }
    }
    
    /// <summary>
    /// NEW Selecting the current ListItem will select the named
    /// ListItems in this attribute's content. Prefixing any named with a hyphen
    /// (-) will reverse the above behaviour. Unselecting the ListItem will
    /// reverse this behaviour. Prefixing the name with a tilde (~) will
    /// suppress this reversal behavior.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKENS")]
    public virtual string selectionSelectsListItems
    {
        get
        {
            return this._selectionSelectsListItems;
        }
        set
        {
            if ((this._selectionSelectsListItems == value))
            {
                return;
            }
            if (((this._selectionSelectsListItems == null) 
                        || (_selectionSelectsListItems.Equals(value) != true)))
            {
                this._selectionSelectsListItems = value;
                this.OnPropertyChanged("selectionSelectsListItems", value);
            }
        }
    }
    
    /// <summary>
    /// If the ancestor ListField has @multiselect = 'true', then
    /// selecting this ListItem should de-select all other ListItem (sibling)
    /// nodes except the current one.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(false)]
    public virtual bool selectionDeselectsSiblings
    {
        get
        {
            return this._selectionDeselectsSiblings;
        }
        set
        {
            if ((_selectionDeselectsSiblings.Equals(value) != true))
            {
                this._selectionDeselectsSiblings = value;
                this.OnPropertyChanged("selectionDeselectsSiblings", value);
            }
            _shouldSerializeselectionDeselectsSiblings = true;
        }
    }
    
    /// <summary>
    /// If @omitWhenSelected is set to true, then the question and
    /// its response(s) should not be present in a typical report derived from
    /// this template. This attribute is usually set to true when the answer
    /// choice is used to control form behavior (e.g., skip logic), or when the
    /// question provides unhelpful "negative" information about actions that
    /// did not occur or were not performed, or things that were not observed or
    /// could not be assessed. If @omitWhenSelectedset is false (default) then
    /// the question and its response(s) should appear in the report. Added
    /// 11/29/15 to replace @reportAction
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(false)]
    public virtual bool omitWhenSelected
    {
        get
        {
            return this._omitWhenSelected;
        }
        set
        {
            if ((_omitWhenSelected.Equals(value) != true))
            {
                this._omitWhenSelected = value;
                this.OnPropertyChanged("omitWhenSelected", value);
            }
            _shouldSerializeomitWhenSelected = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    [System.ComponentModel.DefaultValueAttribute("0")]
    public virtual string repeat
    {
        get
        {
            return this._repeat;
        }
        set
        {
            if ((this._repeat == value))
            {
                return;
            }
            if (((this._repeat == null) 
                        || (_repeat.Equals(value) != true)))
            {
                this._repeat = value;
                this.OnPropertyChanged("repeat", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string instanceGUID
    {
        get
        {
            return this._instanceGUID;
        }
        set
        {
            if ((this._instanceGUID == value))
            {
                return;
            }
            if (((this._instanceGUID == null) 
                        || (_instanceGUID.Equals(value) != true)))
            {
                this._instanceGUID = value;
                this.OnPropertyChanged("instanceGUID", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string parentGUID
    {
        get
        {
            return this._parentGUID;
        }
        set
        {
            if ((this._parentGUID == value))
            {
                return;
            }
            if (((this._parentGUID == null) 
                        || (_parentGUID.Equals(value) != true)))
            {
                this._parentGUID = value;
                this.OnPropertyChanged("parentGUID", value);
            }
        }
    }
    
    /// <summary>
    /// A typed value (e.g., an integer) that is uniquely
    /// associated with a ListItem. An example is the integer 10 for a ListItem
    /// with title that reads "10 o'clock". Typically these values are set to be
    /// used in calculations or other algorithms. In general, they can be
    /// treated something like a user-entered response on a the
    /// ListItemResponseField of a selected ListItem. This field should not be
    /// used for terminologies or local codes. The CodedValue type should be
    /// used for these kinds of metadata. This field should also not be used
    /// other properties such as translations, usage, etc. The data type shoudl
    /// be specified in @AssociatedValueType
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string associatedValue
    {
        get
        {
            return this._associatedValue;
        }
        set
        {
            if ((this._associatedValue == value))
            {
                return;
            }
            if (((this._associatedValue == null) 
                        || (_associatedValue.Equals(value) != true)))
            {
                this._associatedValue = value;
                this.OnPropertyChanged("associatedValue", value);
            }
        }
    }
    
    /// <summary>
    /// The data type of @AssociatedValue. Default is
    /// string.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string associatedValueType
    {
        get
        {
            return this._associatedValueType;
        }
        set
        {
            if ((this._associatedValueType == value))
            {
                return;
            }
            if (((this._associatedValueType == null) 
                        || (_associatedValueType.Equals(value) != true)))
            {
                this._associatedValueType = value;
                this.OnPropertyChanged("associatedValueType", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether OnSelect should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnSelect()
    {
        return OnSelect != null && OnSelect.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnDeselect should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnDeselect()
    {
        return OnDeselect != null && OnDeselect.Count > 0;
    }
    
    /// <summary>
    /// Test whether selected should be serialized
    /// </summary>
    public virtual bool ShouldSerializeselected()
    {
        if (_shouldSerializeselected)
        {
            return true;
        }
        return (_selected != default(bool));
    }
    
    /// <summary>
    /// Test whether selectionDisablesChildren should be serialized
    /// </summary>
    public virtual bool ShouldSerializeselectionDisablesChildren()
    {
        if (_shouldSerializeselectionDisablesChildren)
        {
            return true;
        }
        return (_selectionDisablesChildren != default(bool));
    }
    
    /// <summary>
    /// Test whether selectionDeselectsSiblings should be serialized
    /// </summary>
    public virtual bool ShouldSerializeselectionDeselectsSiblings()
    {
        if (_shouldSerializeselectionDeselectsSiblings)
        {
            return true;
        }
        return (_selectionDeselectsSiblings != default(bool));
    }
    
    /// <summary>
    /// Test whether omitWhenSelected should be serialized
    /// </summary>
    public virtual bool ShouldSerializeomitWhenSelected()
    {
        if (_shouldSerializeomitWhenSelected)
        {
            return true;
        }
        return (_omitWhenSelected != default(bool));
    }
    
    /// <summary>
    /// Test whether ListItemResponseField should be serialized
    /// </summary>
    public virtual bool ShouldSerializeListItemResponseField()
    {
        return (_listItemResponseField != null);
    }
    
    /// <summary>
    /// Test whether SelectIf should be serialized
    /// </summary>
    public virtual bool ShouldSerializeSelectIf()
    {
        return (_selectIf != null);
    }
    
    /// <summary>
    /// Test whether DeselectIf should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDeselectIf()
    {
        return (_deselectIf != null);
    }
    
    /// <summary>
    /// Test whether selectionActivatesItems should be serialized
    /// </summary>
    public virtual bool ShouldSerializeselectionActivatesItems()
    {
        return !string.IsNullOrEmpty(selectionActivatesItems);
    }
    
    /// <summary>
    /// Test whether selectionSelectsListItems should be serialized
    /// </summary>
    public virtual bool ShouldSerializeselectionSelectsListItems()
    {
        return !string.IsNullOrEmpty(selectionSelectsListItems);
    }
    
    /// <summary>
    /// Test whether repeat should be serialized
    /// </summary>
    public virtual bool ShouldSerializerepeat()
    {
        return !string.IsNullOrEmpty(repeat);
    }
    
    /// <summary>
    /// Test whether instanceGUID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceGUID()
    {
        return !string.IsNullOrEmpty(instanceGUID);
    }
    
    /// <summary>
    /// Test whether parentGUID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeparentGUID()
    {
        return !string.IsNullOrEmpty(parentGUID);
    }
    
    /// <summary>
    /// Test whether associatedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializeassociatedValue()
    {
        return !string.IsNullOrEmpty(associatedValue);
    }
    
    /// <summary>
    /// Test whether associatedValueType should be serialized
    /// </summary>
    public virtual bool ShouldSerializeassociatedValueType()
    {
        return !string.IsNullOrEmpty(associatedValueType);
    }
}
}
#pragma warning restore
