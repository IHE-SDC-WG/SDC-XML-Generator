// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type represents any object that is designed to have a visual
/// presence on a form, e.g., Sections, Questions, ListItems, Notes and Blobs. (Other
/// items not inheriting this type may use an optional styleClass
/// attribute.)
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ButtonItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RepeatingType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ListItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class DisplayedType : IdentifiedExtensionType
{
    
    #region Private fields
    private bool _shouldSerializeshowInReport;
    
    private bool _shouldSerializemustImplement;
    
    private bool _shouldSerializevisible;
    
    private bool _shouldSerializeenabled;
    
    private List<LinkType> _link;
    
    private List<BlobType> _blobContent;
    
    private List<ContactType> _contact;
    
    private List<CodingType> _codedValue;
    
    private List<EventType> _onEnter;
    
    private List<EventType> _onExit;
    
    private List<OnEventType> _onEvent;
    
    private PredGuardType _activateIf;
    
    private PredGuardType _deActivateIf;
    
    private string _title;
    
    private bool _enabled;
    
    private bool _visible;
    
    private bool _mustImplement;
    
    private DisplayedTypeShowInReport _showInReport;
    #endregion
    
    ///// <summary>
    ///// DisplayedType class constructor
    ///// </summary>
    //public DisplayedType()
    //{
    //    this._enabled = true;
    //    this._visible = true;
    //    this._mustImplement = true;
    //    this._showInReport = DisplayedTypeShowInReport.True;
    //}
    
    /// <summary>
    /// Link to external information.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("Link", Order=0)]
    public virtual List<LinkType> Link
    {
        get
        {
            return this._link;
        }
        set
        {
            if ((this._link == value))
            {
                return;
            }
            if (((this._link == null) 
                        || (_link.Equals(value) != true)))
            {
                this._link = value;
                this.OnPropertyChanged("Link", value);
            }
        }
    }
    
    /// <summary>
    /// Blob information associated with the current
    /// DisplayedType. The blob may contain any type of special media, but
    /// must be base 64 encoded.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("BlobContent", Order=1)]
    public virtual List<BlobType> BlobContent
    {
        get
        {
            return this._blobContent;
        }
        set
        {
            if ((this._blobContent == value))
            {
                return;
            }
            if (((this._blobContent == null) 
                        || (_blobContent.Equals(value) != true)))
            {
                this._blobContent = value;
                this.OnPropertyChanged("BlobContent", value);
            }
        }
    }
    
    /// <summary>
    /// Any desired contact information regarding, e.g., the
    /// form item, authoring process, certifications, code or coding
    /// processs.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("Contact", Order=2)]
    public virtual List<ContactType> Contact
    {
        get
        {
            return this._contact;
        }
        set
        {
            if ((this._contact == value))
            {
                return;
            }
            if (((this._contact == null) 
                        || (_contact.Equals(value) != true)))
            {
                this._contact = value;
                this.OnPropertyChanged("Contact", value);
            }
        }
    }
    
    /// <summary>
    /// Coding, terminology, classification, keyword, or local
    /// values
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("CodedValue", Order=3)]
    public virtual List<CodingType> CodedValue
    {
        get
        {
            return this._codedValue;
        }
        set
        {
            if ((this._codedValue == value))
            {
                return;
            }
            if (((this._codedValue == null) 
                        || (_codedValue.Equals(value) != true)))
            {
                this._codedValue = value;
                this.OnPropertyChanged("CodedValue", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("OnEnter", Order=4)]
    public virtual List<EventType> OnEnter
    {
        get
        {
            return this._onEnter;
        }
        set
        {
            if ((this._onEnter == value))
            {
                return;
            }
            if (((this._onEnter == null) 
                        || (_onEnter.Equals(value) != true)))
            {
                this._onEnter = value;
                this.OnPropertyChanged("OnEnter", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute("OnExit", Order=5)]
    public virtual List<EventType> OnExit
    {
        get
        {
            return this._onExit;
        }
        set
        {
            if ((this._onExit == value))
            {
                return;
            }
            if (((this._onExit == null) 
                        || (_onExit.Equals(value) != true)))
            {
                this._onExit = value;
                this.OnPropertyChanged("OnExit", value);
            }
        }
    }
    
    /// <summary>
    /// Generic event handler - eventName must be
    /// specified.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute("OnEvent", Order=6)]
    public virtual List<OnEventType> OnEvent
    {
        get
        {
            return this._onEvent;
        }
        set
        {
            if ((this._onEvent == value))
            {
                return;
            }
            if (((this._onEvent == null) 
                        || (_onEvent.Equals(value) != true)))
            {
                this._onEvent = value;
                this.OnPropertyChanged("OnEvent", value);
            }
        }
    }
    
    /// <summary>
    /// Activate the DisplayedType item if the guard
    /// conditions are met.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=7)]
    public virtual PredGuardType ActivateIf
    {
        get
        {
            return this._activateIf;
        }
        set
        {
            if ((this._activateIf == value))
            {
                return;
            }
            if (((this._activateIf == null) 
                        || (_activateIf.Equals(value) != true)))
            {
                this._activateIf = value;
                this.OnPropertyChanged("ActivateIf", value);
            }
        }
    }
    
    /// <summary>
    /// DeActivate the DisplayedType item if the guard
    /// conditions are met.
    /// </summary>
    [System.Xml.Serialization.XmlElementAttribute(Order=8)]
    public virtual PredGuardType DeActivateIf
    {
        get
        {
            return this._deActivateIf;
        }
        set
        {
            if ((this._deActivateIf == value))
            {
                return;
            }
            if (((this._deActivateIf == null) 
                        || (_deActivateIf.Equals(value) != true)))
            {
                this._deActivateIf = value;
                this.OnPropertyChanged("DeActivateIf", value);
            }
        }
    }
    
    /// <summary>
    /// The primary text to show on the form. Also known as
    /// "prompt" or "label" or "visibleText" or "caption"
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string title
    {
        get
        {
            return this._title;
        }
        set
        {
            if ((this._title == value))
            {
                return;
            }
            if (((this._title == null) 
                        || (_title.Equals(value) != true)))
            {
                this._title = value;
                this.OnPropertyChanged("title", value);
            }
        }
    }
    
    /// <summary>
    /// Determines whether the user can interact with the
    /// displayed item when the form is first displayed. All disabled items are
    /// treated as read-only: they are visible but may not be edited. The
    /// attribute value is inherited by descendants.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(true)]
    public virtual bool enabled
    {
        get
        {
            return this._enabled;
        }
        set
        {
            if ((_enabled.Equals(value) != true))
            {
                this._enabled = value;
                this.OnPropertyChanged("enabled", value);
            }
            _shouldSerializeenabled = true;
        }
    }
    
    /// <summary>
    /// Determines whether the item should be visible on a
    /// computer screen when the form is first displayed. The attribute value is
    /// inherited by descendants.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(true)]
    public virtual bool visible
    {
        get
        {
            return this._visible;
        }
        set
        {
            if ((_visible.Equals(value) != true))
            {
                this._visible = value;
                this.OnPropertyChanged("visible", value);
            }
            _shouldSerializevisible = true;
        }
    }
    
    /// <summary>
    /// If this attribute is set to "true" (the default), then the
    /// form implementation must make this item available for use on the form.
    /// If this attribute is set to "false" on a parent or ancestor item, then
    /// all child/descendant items inherit this "false" setting, even if they
    /// have this attribute set to "true." In other words, the child/descendent
    /// items do not need to be implemented if any parent/ancestor item has this
    /// attribute set to false.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(true)]
    public virtual bool mustImplement
    {
        get
        {
            return this._mustImplement;
        }
        set
        {
            if ((_mustImplement.Equals(value) != true))
            {
                this._mustImplement = value;
                this.OnPropertyChanged("mustImplement", value);
            }
            _shouldSerializemustImplement = true;
        }
    }
    
    /// <summary>
    /// CHANGED to T/F/Optional If @showInReport on a Question is
    /// false, then the Question and its ListItems (if any) should not be
    /// present in a typical report derived from this template. If this
    /// attribute appears on a ListItem, then the entire question and all
    /// ListItems should be omitted from the report. If this attribute appears
    /// on a Section, then the entire Section and all Section contents
    /// (descendents) should be omitted from the report. If @showInReport
    /// appears on a DisplayedItem, then the DisplayedItem should be omitted
    /// from the report. This attribute is usually set to false when a Question
    /// is used to control form behavior (e.g., skip logic), or when the
    /// Question provides unhelpful "negative" information about actions that
    /// did not occur or were not performed, or things that were not
    /// observed.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(DisplayedTypeShowInReport.True)]
    public virtual DisplayedTypeShowInReport showInReport
    {
        get
        {
            return this._showInReport;
        }
        set
        {
            if ((_showInReport.Equals(value) != true))
            {
                this._showInReport = value;
                this.OnPropertyChanged("showInReport", value);
            }
            _shouldSerializeshowInReport = true;
        }
    }
    
    /// <summary>
    /// Test whether Link should be serialized
    /// </summary>
    public virtual bool ShouldSerializeLink()
    {
        return Link != null && Link.Count > 0;
    }
    
    /// <summary>
    /// Test whether BlobContent should be serialized
    /// </summary>
    public virtual bool ShouldSerializeBlobContent()
    {
        return BlobContent != null && BlobContent.Count > 0;
    }
    
    /// <summary>
    /// Test whether Contact should be serialized
    /// </summary>
    public virtual bool ShouldSerializeContact()
    {
        return Contact != null && Contact.Count > 0;
    }
    
    /// <summary>
    /// Test whether CodedValue should be serialized
    /// </summary>
    public virtual bool ShouldSerializeCodedValue()
    {
        return CodedValue != null && CodedValue.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnEnter should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnEnter()
    {
        return OnEnter != null && OnEnter.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnExit should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnExit()
    {
        return OnExit != null && OnExit.Count > 0;
    }
    
    /// <summary>
    /// Test whether OnEvent should be serialized
    /// </summary>
    public virtual bool ShouldSerializeOnEvent()
    {
        return OnEvent != null && OnEvent.Count > 0;
    }
    
    /// <summary>
    /// Test whether enabled should be serialized
    /// </summary>
    public virtual bool ShouldSerializeenabled()
    {
        if (_shouldSerializeenabled)
        {
            return true;
        }
        return (_enabled != default(bool));
    }
    
    /// <summary>
    /// Test whether visible should be serialized
    /// </summary>
    public virtual bool ShouldSerializevisible()
    {
        if (_shouldSerializevisible)
        {
            return true;
        }
        return (_visible != default(bool));
    }
    
    /// <summary>
    /// Test whether mustImplement should be serialized
    /// </summary>
    public virtual bool ShouldSerializemustImplement()
    {
        if (_shouldSerializemustImplement)
        {
            return true;
        }
        return (_mustImplement != default(bool));
    }
    
    /// <summary>
    /// Test whether showInReport should be serialized
    /// </summary>
    public virtual bool ShouldSerializeshowInReport()
    {
        if (_shouldSerializeshowInReport)
        {
            return true;
        }
        return (_showInReport != default(DisplayedTypeShowInReport));
    }
    
    /// <summary>
    /// Test whether ActivateIf should be serialized
    /// </summary>
    public virtual bool ShouldSerializeActivateIf()
    {
        return (_activateIf != null);
    }
    
    /// <summary>
    /// Test whether DeActivateIf should be serialized
    /// </summary>
    public virtual bool ShouldSerializeDeActivateIf()
    {
        return (_deActivateIf != null);
    }
    
    /// <summary>
    /// Test whether title should be serialized
    /// </summary>
    public virtual bool ShouldSerializetitle()
    {
        return !string.IsNullOrEmpty(title);
    }
}
}
#pragma warning restore
