// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// CHANGED: This type represents a form or portion of a form that is
/// imported into the current form at a specific location. It allows the composition of
/// forms from other forms or parts of other forms. In practice, using an injected
/// section will requiresome or all of the injected FormDesignXML to be injected under
/// this the InjectForm element. For that reason, the schema supports those elements to
/// appear inline. However, in a "raw" form (not yet filled out), the FormDesign element
/// would generally be empty; only the top-level InjectFormType attributes would be used
/// to point to the parts to be later injected. Form parts to be injected are specified
/// by packageID, not FormID. This allows an injected form to be assocaited with helper
/// files, or to return previosuly completed form parts containing responses.
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ActInjectType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public partial class InjectFormType : IdentifiedExtensionType
{
    
    #region Private fields
    private IdentifiedExtensionType _item;
    
    private string _pkgFullURI;
    
    private string _rootItemID;
    
    private string _pkgManagerURI;
    
    private string _x_pkgID;
    
    private string _x_pkgInstanceURI;
    
    private string _x_pkgInstanceVersionURI;
    
    private string _pkgBaseURI;
    
    private string _x_injectionID;
    
    private string _repeat;
    
    private string _instanceGUID;
    
    private string _parentGUID;
    #endregion
    
    ///// <summary>
    ///// InjectFormType class constructor
    ///// </summary>
    //public InjectFormType()
    //{
    //    this._repeat = "0";
    //}
    
    [System.Xml.Serialization.XmlElementAttribute("FormDesign", typeof(FormDesignType), Order=0)]
    [System.Xml.Serialization.XmlElementAttribute("Question", typeof(QuestionItemType), Order=0)]
    [System.Xml.Serialization.XmlElementAttribute("Section", typeof(SectionItemType), Order=0)]
    public virtual IdentifiedExtensionType Item
    {
        get
        {
            return this._item;
        }
        set
        {
            if ((this._item == value))
            {
                return;
            }
            if (((this._item == null) 
                        || (_item.Equals(value) != true)))
            {
                this._item = value;
                this.OnPropertyChanged("Item", value);
            }
        }
    }
    
    /// <summary>
    /// The injected package is retrieved form pkgManagerURI + "/"
    /// + pkgFullURI. If pkgFullURI is null, then then current form is used
    /// injection.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string pkgFullURI
    {
        get
        {
            return this._pkgFullURI;
        }
        set
        {
            if ((this._pkgFullURI == value))
            {
                return;
            }
            if (((this._pkgFullURI == null) 
                        || (_pkgFullURI.Equals(value) != true)))
            {
                this._pkgFullURI = value;
                this.OnPropertyChanged("pkgFullURI", value);
            }
        }
    }
    
    /// <summary>
    /// The rootItemID is the ID of the form or form part that
    /// will be injected. It must point to a valid FormDesign, Section or
    /// Question element.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string rootItemID
    {
        get
        {
            return this._rootItemID;
        }
        set
        {
            if ((this._rootItemID == value))
            {
                return;
            }
            if (((this._rootItemID == null) 
                        || (_rootItemID.Equals(value) != true)))
            {
                this._rootItemID = value;
                this.OnPropertyChanged("rootItemID", value);
            }
        }
    }
    
    /// <summary>
    /// The server from which the injected package will be
    /// retrieved.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string pkgManagerURI
    {
        get
        {
            return this._pkgManagerURI;
        }
        set
        {
            if ((this._pkgManagerURI == value))
            {
                return;
            }
            if (((this._pkgManagerURI == null) 
                        || (_pkgManagerURI.Equals(value) != true)))
            {
                this._pkgManagerURI = value;
                this.OnPropertyChanged("pkgManagerURI", value);
            }
        }
    }
    
    /// <summary>
    /// This ID represents the Package that contains the form to
    /// be injected. The package may contain an empty form or a form containing
    /// responses.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string X_pkgID
    {
        get
        {
            return this._x_pkgID;
        }
        set
        {
            if ((this._x_pkgID == value))
            {
                return;
            }
            if (((this._x_pkgID == null) 
                        || (_x_pkgID.Equals(value) != true)))
            {
                this._x_pkgID = value;
                this.OnPropertyChanged("X_pkgID", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a
    /// package. Used for tracking form responses across time and across
    /// multiple episodes of editing by end-users. This URI does not change for
    /// each edit session of a package instance.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string X_pkgInstanceURI
    {
        get
        {
            return this._x_pkgInstanceURI;
        }
        set
        {
            if ((this._x_pkgInstanceURI == value))
            {
                return;
            }
            if (((this._x_pkgInstanceURI == null) 
                        || (_x_pkgInstanceURI.Equals(value) != true)))
            {
                this._x_pkgInstanceURI = value;
                this.OnPropertyChanged("X_pkgInstanceURI", value);
            }
        }
    }
    
    /// <summary>
    /// NEW: Unique URI used to identify a unique instance of a
    /// package's saved responses. It is used for tracking package responses
    /// across time and across multiple episodes of editing by end-users. This
    /// URI must change for each edit/save session of a package instance. It may
    /// be e.g., a new GUID, or a repeat of the pkgInstanceID followed by a
    /// version number.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string X_pkgInstanceVersionURI
    {
        get
        {
            return this._x_pkgInstanceVersionURI;
        }
        set
        {
            if ((this._x_pkgInstanceVersionURI == value))
            {
                return;
            }
            if (((this._x_pkgInstanceVersionURI == null) 
                        || (_x_pkgInstanceVersionURI.Equals(value) != true)))
            {
                this._x_pkgInstanceVersionURI = value;
                this.OnPropertyChanged("X_pkgInstanceVersionURI", value);
            }
        }
    }
    
    /// <summary>
    /// DRAFT: The baseURI of the package, which indicates the
    /// home source of the package. The formManagerURP + pkgBaseURI + pkgID are
    /// concatenated to retrieve an empty form. formManagerURP + pkgBaseURI +
    /// pkgInstanceVersionURI are concatenated to retrieve a specific version of
    /// a populated form. formManagerURP + pkgBaseURI + pkgInstanceURI are
    /// concatenated to retrieve the latest instance of a populated
    /// form.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public virtual string pkgBaseURI
    {
        get
        {
            return this._pkgBaseURI;
        }
        set
        {
            if ((this._pkgBaseURI == value))
            {
                return;
            }
            if (((this._pkgBaseURI == null) 
                        || (_pkgBaseURI.Equals(value) != true)))
            {
                this._pkgBaseURI = value;
                this.OnPropertyChanged("pkgBaseURI", value);
            }
        }
    }
    
    /// <summary>
    /// Unique ID (GUID) to distinguish multiple instances of the
    /// same injected node.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string X_injectionID
    {
        get
        {
            return this._x_injectionID;
        }
        set
        {
            if ((this._x_injectionID == value))
            {
                return;
            }
            if (((this._x_injectionID == null) 
                        || (_x_injectionID.Equals(value) != true)))
            {
                this._x_injectionID = value;
                this.OnPropertyChanged("X_injectionID", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    [System.ComponentModel.DefaultValueAttribute("0")]
    public virtual string repeat
    {
        get
        {
            return this._repeat;
        }
        set
        {
            if ((this._repeat == value))
            {
                return;
            }
            if (((this._repeat == null) 
                        || (_repeat.Equals(value) != true)))
            {
                this._repeat = value;
                this.OnPropertyChanged("repeat", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string instanceGUID
    {
        get
        {
            return this._instanceGUID;
        }
        set
        {
            if ((this._instanceGUID == value))
            {
                return;
            }
            if (((this._instanceGUID == null) 
                        || (_instanceGUID.Equals(value) != true)))
            {
                this._instanceGUID = value;
                this.OnPropertyChanged("instanceGUID", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string parentGUID
    {
        get
        {
            return this._parentGUID;
        }
        set
        {
            if ((this._parentGUID == value))
            {
                return;
            }
            if (((this._parentGUID == null) 
                        || (_parentGUID.Equals(value) != true)))
            {
                this._parentGUID = value;
                this.OnPropertyChanged("parentGUID", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether Item should be serialized
    /// </summary>
    public virtual bool ShouldSerializeItem()
    {
        return (_item != null);
    }
    
    /// <summary>
    /// Test whether pkgFullURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializepkgFullURI()
    {
        return !string.IsNullOrEmpty(pkgFullURI);
    }
    
    /// <summary>
    /// Test whether rootItemID should be serialized
    /// </summary>
    public virtual bool ShouldSerializerootItemID()
    {
        return !string.IsNullOrEmpty(rootItemID);
    }
    
    /// <summary>
    /// Test whether pkgManagerURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializepkgManagerURI()
    {
        return !string.IsNullOrEmpty(pkgManagerURI);
    }
    
    /// <summary>
    /// Test whether X_pkgID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeX_pkgID()
    {
        return !string.IsNullOrEmpty(X_pkgID);
    }
    
    /// <summary>
    /// Test whether X_pkgInstanceURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeX_pkgInstanceURI()
    {
        return !string.IsNullOrEmpty(X_pkgInstanceURI);
    }
    
    /// <summary>
    /// Test whether X_pkgInstanceVersionURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializeX_pkgInstanceVersionURI()
    {
        return !string.IsNullOrEmpty(X_pkgInstanceVersionURI);
    }
    
    /// <summary>
    /// Test whether pkgBaseURI should be serialized
    /// </summary>
    public virtual bool ShouldSerializepkgBaseURI()
    {
        return !string.IsNullOrEmpty(pkgBaseURI);
    }
    
    /// <summary>
    /// Test whether X_injectionID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeX_injectionID()
    {
        return !string.IsNullOrEmpty(X_injectionID);
    }
    
    /// <summary>
    /// Test whether repeat should be serialized
    /// </summary>
    public virtual bool ShouldSerializerepeat()
    {
        return !string.IsNullOrEmpty(repeat);
    }
    
    /// <summary>
    /// Test whether instanceGUID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceGUID()
    {
        return !string.IsNullOrEmpty(instanceGUID);
    }
    
    /// <summary>
    /// Test whether parentGUID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeparentGUID()
    {
        return !string.IsNullOrEmpty(parentGUID);
    }
}
}
#pragma warning restore
