// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.87.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace SDC.Schema2
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// This type presents any display objects that may be repeated based upon
/// on the user's interaction with the form objects. Items derived from this type
/// include Sections and Questions.
/// </summary>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(QuestionItemType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionBaseType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(SectionItemType))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[System.SerializableAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ihe:qrph:sdc:2016")]
public abstract partial class RepeatingType : DisplayedType
{
    
    #region Private fields
    private bool _shouldSerializemaxCard;
    
    private bool _shouldSerializeminCard;
    
    private ushort _minCard;
    
    private ushort _maxCard;
    
    private string _repeat;
    
    private string _instanceGUID;
    
    private string _parentGUID;
    #endregion
    
    ///// <summary>
    ///// RepeatingType class constructor
    ///// </summary>
    //public RepeatingType()
    //{
    //    this._minCard = ((ushort)(1));
    //    this._maxCard = ((ushort)(1));
    //    this._repeat = "0";
    //}
    
    /// <summary>
    /// @minCard is the minimum number of repetitions allowed for
    /// a section or question. The default value is 1, indicating that the user
    /// must answer any question(s) that has this attribute set. If @minCard is
    /// set to 0, then the item and all descendent questions are optional to
    /// answer.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(typeof(ushort), "1")]
    public virtual ushort minCard
    {
        get
        {
            return this._minCard;
        }
        set
        {
            if ((_minCard.Equals(value) != true))
            {
                this._minCard = value;
                this.OnPropertyChanged("minCard", value);
            }
            _shouldSerializeminCard = true;
        }
    }
    
    /// <summary>
    /// @maxCard is the maximum number of repetitions allowed for
    /// a section or question. The default value is 1, indicating that the
    /// section or question cannot be repeated on the data entry form. A value
    /// of 0 indicates that the number of repeats is unlimited. If @maxCard is
    /// not 0, then Must be greater than or equal to minCard.
    /// </summary>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(typeof(ushort), "1")]
    public virtual ushort maxCard
    {
        get
        {
            return this._maxCard;
        }
        set
        {
            if ((_maxCard.Equals(value) != true))
            {
                this._maxCard = value;
                this.OnPropertyChanged("maxCard", value);
            }
            _shouldSerializemaxCard = true;
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    [System.ComponentModel.DefaultValueAttribute("0")]
    public virtual string repeat
    {
        get
        {
            return this._repeat;
        }
        set
        {
            if ((this._repeat == value))
            {
                return;
            }
            if (((this._repeat == null) 
                        || (_repeat.Equals(value) != true)))
            {
                this._repeat = value;
                this.OnPropertyChanged("repeat", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string instanceGUID
    {
        get
        {
            return this._instanceGUID;
        }
        set
        {
            if ((this._instanceGUID == value))
            {
                return;
            }
            if (((this._instanceGUID == null) 
                        || (_instanceGUID.Equals(value) != true)))
            {
                this._instanceGUID = value;
                this.OnPropertyChanged("instanceGUID", value);
            }
        }
    }
    
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public virtual string parentGUID
    {
        get
        {
            return this._parentGUID;
        }
        set
        {
            if ((this._parentGUID == value))
            {
                return;
            }
            if (((this._parentGUID == null) 
                        || (_parentGUID.Equals(value) != true)))
            {
                this._parentGUID = value;
                this.OnPropertyChanged("parentGUID", value);
            }
        }
    }
    
    /// <summary>
    /// Test whether minCard should be serialized
    /// </summary>
    public virtual bool ShouldSerializeminCard()
    {
        if (_shouldSerializeminCard)
        {
            return true;
        }
        return (_minCard != default(ushort));
    }
    
    /// <summary>
    /// Test whether maxCard should be serialized
    /// </summary>
    public virtual bool ShouldSerializemaxCard()
    {
        if (_shouldSerializemaxCard)
        {
            return true;
        }
        return (_maxCard != default(ushort));
    }
    
    /// <summary>
    /// Test whether repeat should be serialized
    /// </summary>
    public virtual bool ShouldSerializerepeat()
    {
        return !string.IsNullOrEmpty(repeat);
    }
    
    /// <summary>
    /// Test whether instanceGUID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeinstanceGUID()
    {
        return !string.IsNullOrEmpty(instanceGUID);
    }
    
    /// <summary>
    /// Test whether parentGUID should be serialized
    /// </summary>
    public virtual bool ShouldSerializeparentGUID()
    {
        return !string.IsNullOrEmpty(parentGUID);
    }
}
}
#pragma warning restore
